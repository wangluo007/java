package com.inspur.test;

import com.google.gson.Gson;

import com.inspur.lambo.framework.aspect.annotation.LogAround;
import com.inspur.lambo.framework.aspect.annotation.OpenApi;
import com.inspur.lambo.framework.util.PropertiesUtil;
import com.inspur.mrtpub.aspect.JsonBean;
import com.inspur.mrtpub.httpclient.HttpClientUtil;
import com.inspur.mrtpub.httpclient.HttpConfig;
import com.inspur.mrtpub.util.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.dom4j.Attribute;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;


import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;
import java.io.*;
import java.math.BigDecimal;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.*;
import java.util.regex.Pattern;


public class Goodsinfo {

    public final static String GDS_URL = "http://api.chinatrace.org";
    public final static String GDS_GIN = "6901234504057";
    public final static String GDS_KEY = "tbFVxGV4wnbOKnCBxKcqQmtIUKfil/iJaJZeG8wrM7Q=";

    private static Map meaunitsMap = new HashMap();//单位缓存
    private static Map<String, String> sortMap = new HashMap<String, String>();//分类缓存


    /**
     * 方法描述:
     * 本方法根据BARCODE查询商品档案信息
     * 具体请参考：RIM_DOC\设计文档\详细设计\云端商品库应用\终端系统云端商品库应用_详细设计说明书.docx
     *
     * @param
     * @return Map
     * @author lizhen 2016年4月14日
     * <p>
     * 修改描述：
     * @modifier
     */

    public void getGoodsInfo(String BARCODE) {
        Map retMap = getGodsInfo(BARCODE);
        if (!"000".equals(retMap.get("code"))) {//接口调用失败
            System.out.println(BARCODE + "----商品有问题，直接返回---" + retMap);
            return;
        }
        Map resultMap = detailGodsInfo(retMap);//组织商品数据
        insertGoodsInfo(resultMap);//生成商品表和图片表sql
    }

    public void insertGoodsInfo(final Map godsInfoMap) {
        String time = DateUtil.getCurrentTimeMillisAsString();
        String shelfLift = null;
        if (godsInfoMap.get("SHELF_LIFE") != null && !"".equals(godsInfoMap.get("SHELF_LIFE"))) {
            shelfLift = "'" + godsInfoMap.get("SHELF_LIFE") + "'";
        }
        String godsSpec = null;
        if (godsInfoMap.get("GODS_SPEC") != null && !"".equals(godsInfoMap.get("GODS_SPEC"))) {
            godsSpec = "'" + godsInfoMap.get("GODS_SPEC") + "'";
        }
        String orgPlace = null;
        if (godsInfoMap.get("ORG_PLACE") != null && !"".equals(godsInfoMap.get("ORG_PLACE"))) {
            orgPlace = "'" + godsInfoMap.get("ORG_PLACE") + "'";
        }
        String imgPath = null;
        if (godsInfoMap.get("IMG_PATH") != null && !"".equals(godsInfoMap.get("IMG_PATH"))) {
            imgPath = "'" + godsInfoMap.get("IMG_PATH") + "'";
        }
        StringBuffer godsinfoSb = new StringBuffer();
        godsinfoSb.append("INSERT IGNORE INTO PUB_GOODSINFO (GODS_ID,GODS_NAME,SHORT_GODS_NAME,GODS_SPELL,SORT_ID,BARCODE,UNIT_ID,SHELF_LIFE,GODS_SPEC,ORG_PLACE,IMG_PATH,IS_TOBACCO,STATUS,CREA_DATE,CHAN_DATE)");
        godsinfoSb.append("VALUES(");
        godsinfoSb.append("'" + godsInfoMap.get("GODS_ID") + "'");
        godsinfoSb.append(",'" + godsInfoMap.get("GODS_NAME") + "'");
        godsinfoSb.append(",'" + godsInfoMap.get("SHORT_GODS_NAME") + "'");
        godsinfoSb.append(",'" + godsInfoMap.get("GODS_SPELL") + "'");
        godsinfoSb.append(",'" + godsInfoMap.get("SORT_ID") + "'");
        godsinfoSb.append(",'" + godsInfoMap.get("BARCODE") + "'");
        godsinfoSb.append(",'" + godsInfoMap.get("UNIT_ID") + "'");
        godsinfoSb.append("," + shelfLift);
        godsinfoSb.append("," + godsSpec);
        godsinfoSb.append("," + orgPlace);
        godsinfoSb.append("," + imgPath);
        godsinfoSb.append(",'00'");
        godsinfoSb.append(",'01'");
        godsinfoSb.append(",'" + time + "'");
        godsinfoSb.append(",'" + time + "');\n");

        saveSqlFileMrtdd(godsinfoSb.toString(), "PUB_GOODSINFO");
        //插入图片表
        if (godsInfoMap.get("GOODS_IMG") != null) {


            List<Map> imgInfoList = (List) godsInfoMap.get("GOODS_IMG");
            for (Map img : imgInfoList) {
                StringBuffer insertSql = new StringBuffer();
                insertSql.append("INSERT INTO PUB_GOODS_IMG (IMG_ID,GODS_ID ,IMG_CLASS ,IMG_TARGET ,IMG_POS ,IMG_PATH  , SORT_ORDER  ,CREA_DATE  , CHAN_DATE  )");
                insertSql.append("VALUES('" + img.get("IMG_ID") + "','" + godsInfoMap.get("GODS_ID") + "','" + img.get("IMG_CLASS") + "','" + img.get("IMG_TARGET") + "','" + img.get("IMG_POS") + "','" + img.get("IMG_PATH") + "','" + img.get("SORT_ORDER") + "','" + time + "','" + time + "');\n");
                saveSqlFileMrtdd(insertSql.toString(), "PUB_GOODS_IMG");

            }
        }

    }

    //组织商品数据
    private Map detailGodsInfo(Map retMap) {
        String godsName = (String) retMap.get("PRODUCT_NAME");
        if (godsName.length() > 100) {
            godsName = godsName.substring(0, 100);
        }
        String godsSpell = Cn2Spell.converterToFirstSpell(godsName);
        if (godsSpell != null && godsSpell.length() > 64) {
            godsSpell = godsSpell.substring(0, 64);
        }
        String expDate = (String) retMap.get("EXP_DATE");
        if (expDate != null && expDate.length() > 32) {
            expDate = expDate.substring(0, 32);
        }
        String spec = (String) retMap.get("SPEC");
        if (spec != null && spec.length() > 64) {
            spec = spec.substring(0, 64);
        }
        String oriPlace = (String) retMap.get("ORI_PLACE");
        if (oriPlace != null && oriPlace.length() > 64) {
            oriPlace = oriPlace.substring(0, 64);
        }
        Map resultMap = new HashMap();
        resultMap.put("GODS_ID", PubTool.uuid());
        resultMap.put("GODS_NAME", godsName);
        resultMap.put("SHORT_GODS_NAME", godsName);
        resultMap.put("GODS_SPELL", godsSpell);
        resultMap.put("SORT_ID", getSortId((String) retMap.get("GPC_CATEGORY_CODE"), (String) retMap.get("GPC2020")));
        resultMap.put("BARCODE", retMap.get("BARCODE"));
        resultMap.put("UNIT_ID", getUnitId((String) retMap.get("SALE_UNIT")));
        resultMap.put("SHELF_LIFE", expDate);
        resultMap.put("IS_TOBACCO", "00");
        resultMap.put("STATUS", "01");
        resultMap.put("GODS_SPEC", spec);
        resultMap.put("ORG_PLACE", oriPlace);
        String imgPath = null;
        if (retMap.get("IMG_LIST") != null) {//信息网返回了图片信息
            List<String> imgList = (List<String>) retMap.get("IMG_LIST");
            imgPath = imgList.get(0);//第一个当做主图
            List imgInfoList = new ArrayList();
            for (int i = 0; i < imgList.size(); i++) {
                Map imgMap = new HashMap();
                imgMap.put("IMG_ID", PubTool.uuid());
                imgMap.put("IMG_CLASS", i == 0 ? "10" : "20");
                imgMap.put("IMG_TARGET", "10");
                imgMap.put("IMG_POS", "10");
                imgMap.put("IMG_PATH", imgList.get(i));
                imgMap.put("SORT_ORDER", (i + 1) + "");
                imgInfoList.add(imgMap);
            }

            resultMap.put("GOODS_IMG", imgInfoList);
        }
        resultMap.put("IMG_PATH", imgPath);//第一个当做主图
        resultMap.put("INPRICE", null);
        resultMap.put("OUTPRICE", null);
        resultMap.put("VIP_OUTPRICE", null);
        resultMap.put("OTHERTO_UNITS", "1.000000");
        resultMap.put("SECOND_ID", null);
        resultMap.put("DESCRIPTION", null);
        resultMap.put("ITEM_WEIGHT", null);
        resultMap.put("REMARK", null);

        return resultMap;
    }


    /**
     * 调用中国商品信息网拉取商品
     *
     * @param barcode
     * @return
     */
    private Map getGodsInfo(String barcode) {
        String code = "001";//默认不符合要求
        String msg = "";
        Map map = new HashMap();

        int timeOut = 1000;//超时时间，默认1000ms


        String data = "/AAQI/v1/ProductData/gtin/" + barcode + "?targetMarket=156&dataVersion=1.1&clientGln=" + GDS_GIN;

        try {

            String mac = getMac(GDS_KEY, data);
            String url = GDS_URL + "/AAQI/v1/ProductData/gtin/" + barcode + "?targetMarket=156&dataVersion=1.1&clientGln=" + GDS_GIN + "&mac=" + mac;
            long a = System.currentTimeMillis();
            HttpConfig config = HttpConfig.custom().timeout(timeOut).url(url);
            String reString = HttpClientUtil.get(config);
            System.out.println(barcode + "--调用耗时：" + (System.currentTimeMillis() - a) + "ms;商品网返回值=" + reString);
            Document document = DocumentHelper.parseText(reString);
            Element root = document.getRootElement();
            Map textKeyMap = getTextKeyMap();
            listNodes(root, map, "", textKeyMap);

            if (map.isEmpty()) {//接口有问题
                msg = "商品网返回值=" + reString;
            } else {
                String checkResult = String.valueOf(map.get("CHECK_RESULT"));
                if ("1".equals(checkResult) || "S003".equals(checkResult)) {//返回数据正常
                    //检查商品名称 是否符合要求
                    if (checkGodsName(map)) {//符合要求
                        //放入mq，供大数据使用
                        map.put("BARCODE", barcode);
                        getGpSql(map);//大数据sql
                        code = "000";
                        msg = "checkResult:" + checkResult;
                    } else {//不符合要求
                        msg = "godsName:" + map.get("PRODUCT_NAME");
                        //插入去重表
                        insertBarcodeDedup(barcode, checkResult + "");
                    }

                } else if (null != checkResult && !"".equals(checkResult)) {//没有该商品数据
                    msg = "checkResult:" + checkResult;
                    //插入去重表
                    insertBarcodeDedup(barcode, checkResult + "");
                } else {//返回数据异常
                    msg = "商品网返回值=" + reString;
                }

            }
            map.put("code", code);
            map.put("msg", msg);
            return map;

        } catch (Exception e) {
            System.out.println(barcode + "--调用中国商品信息网报错，" + e);
            map.put("code", "001");
            map.put("msg", "调用中国商品信息网报错:" + e);
            return map;
        }
    }

    //检查商品名称 是否符合要求 符合返回true 不符合返回false
    private boolean checkGodsName(Map map) {
        String godsName = (String) map.get("PRODUCT_NAME");
        String gpc2020 = (String) map.get("GPC2020");
        String gpcCategoryCode = (String) map.get("GPC_CATEGORY_CODE"); //502115
        if ("10000185".equals(gpc2020) || "10000186".equals(gpc2020) || "10000134".equals(gpc2020) || "1000026".equals(gpc2020) || "10000268".equals(gpc2020) || "10000620".equals(gpc2020)) {//烟草 返回
            return false;
        }
        if (gpcCategoryCode != null && gpcCategoryCode.startsWith("502115")) {//烟草 返回
            return false;
        }
        if (godsName == null || "".equals(godsName.trim())) {
            return false;
        }
        if (godsName == null || godsName.trim().length() < 2) {
            return false;
        }
        if (godsName.contains("企业未公开详细信息") || godsName.equals("待定") || godsName.equals("测试") || godsName.equals("产品测试") || godsName.equals("新版测试")) {//商品名称有问题
            return false;
        }

        //全数字的商品名称也过滤掉
        String regex = "^[a-z0-9A-Z\\-—]+$";
        if (godsName.matches(regex)) {//全是数字和英文
            return false;
        }
        return true;//名称符合要求
    }

    private static void getGpSql(Map map) throws IOException {
        Iterator it = map.entrySet().iterator();
        StringBuffer sb = new StringBuffer();
        sb.append("INSERT   INTO MRTESTDB.CHINA_COMMODITY_INFORMATION(");

        StringBuffer sb1 = new StringBuffer();
        StringBuffer sb2 = new StringBuffer();
        String godsName = null;
        while (it.hasNext()) {
            Map.Entry entry = (Map.Entry) it.next();
            sb1.append(entry.getKey() + ",");
            String value = String.valueOf(entry.getValue()).replace("'", " ").replace("\"", " ").replace("\\n", "").replace("\\r", "").replace("\\r\\n", "");
            sb2.append("'" + value + "',");

            if ("PRODUCT_NAME".equals(entry.getKey())) {
                godsName = value;
            }
        }
        String spell = null;
        if (godsName != null && !"".equals(godsName)) {
            spell = "'" + Cn2Spell.converterToFirstSpell(godsName) + "'";
        }
        sb.append(sb1.append("GODS_SPELL"));
        sb.append(")values(");
        sb.append(sb2.append(spell));
        sb.append(");\n");
        saveSqlFileMrtdd(sb.toString(), "CHINA_COMMODITY_INFORMATION");

    }

    //插入去重表sql
    private void insertBarcodeDedup(String barcode, String result) {
        String status;
        if (result != null && result.length() > 25) {
            status = result.substring(0, 25);
        } else {
            status = result;
        }

        String sql = "INSERT IGNORE INTO BARCODE_DEDUPLICATION (BARCODE,STATUS,CREA_DATE)VALUES ('" + barcode + "','" + status + "','" + DateUtil.getCurrentTimeMillisAsString() + "');\n";

        saveSqlFileMrtdd(sql, "BARCODE_DEDUPLICATION");
    }

    private String getMac(String key, String data) {
        Mac m;
        byte[] secretByte;
        SecretKey macKey;
        String resultMac = "";
        byte[] digest;

        try {
            m = Mac.getInstance("HmacSHA256");
            secretByte = DatatypeConverter.parseBase64Binary(key);
            byte[] dataBytes = data.getBytes("ASCII");
            macKey = new SecretKeySpec(secretByte, "HMACSHA256");
            m.init(macKey);
            digest = m.doFinal(dataBytes);
            resultMac = toHex(digest);
            resultMac = resultMac.toUpperCase();

        } catch (NoSuchAlgorithmException | UnsupportedEncodingException | InvalidKeyException e) {
            e.printStackTrace();
        }
        return resultMac;
    }

    private String toHex(byte[] buffer) {
        StringBuffer sb = new StringBuffer(buffer.length * 2);
        StringBuffer s = new StringBuffer(buffer.length);
        for (int i = 0; i < buffer.length; i++) {
            sb.append(Character.forDigit((buffer[i] & 240) >> 4, 16));
            sb.append(Character.forDigit(buffer[i] & 15, 16));
            s.append(buffer[i]);
        }
        return sb.toString();
    }

    /**
     * 解析xml文件
     *
     * @param node
     * @param map
     * @param name
     */
    public static void listNodes(Element node, Map map, String name, Map textKeyMap) {

        // 获取当前节点的所有属性节点
        List<Attribute> list = node.attributes();
        if (list != null && list.size() > 0) {
            Attribute attr = list.get(0);
            if (textKeyMap.containsKey(attr.getValue())) {
                if (node.getText() != null && !"".equals(node.getText().trim())) {
                    map.put(textKeyMap.get(attr.getValue()), dealStr(node.getText()));
                }
            }
        }

        if (textKeyMap.containsKey(node.getName())) {
            if (node.getText() != null && !"".equals(node.getText().trim())) {
                map.put(textKeyMap.get(node.getName()), dealStr(node.getText()));
            }
        } else if ("brandNameInformation".equals(name) && "brandName".equals(node.getName()) && node.getText() != null && !"".equals(node.getText().trim())) {
            map.put("BRAND_NAME_INFORMATION", dealStr(node.getText()));
        } else if ("productInformationLink".equals(name) && "url".equals(node.getName()) && node.getText() != null && !"".equals(node.getText().trim())) {
            map.put("PRODUCT_INFORMATION_LINK", dealStr(node.getText()));
        } else if ("imageLink".equals(name) && "url".equals(node.getName()) && node.getText() != null && !"".equals(node.getText().trim())) {
            if (node.getText().contains(".jpeg") || node.getText().contains(".JPEG") || node.getText().contains(".PNG") || node.getText().contains(".png") || node.getText().contains(".jpg") || node.getText().contains(".JPG")) {
                if (map.containsKey("IMG_LIST")) {
                    ((List) map.get("IMG_LIST")).add(node.getText().trim());
                } else {
                    List<String> imgList = new ArrayList<String>();
                    imgList.add(node.getText().trim());
                    map.put("IMG_LIST", imgList);

                }
            }


        }
        // 当前节点下面子节点迭代器
        Iterator<Element> it = node.elementIterator();
        // 遍历
        while (it.hasNext()) {
            // 获取某个子节点对象
            Element e = it.next();
            // 对子节点进行遍历
            listNodes(e, map, node.getName(), textKeyMap);
        }
    }

    //隐藏特殊字符
    private static String dealStr(String str) {
        if (!str.equals("货号") && str.contains("货号")) {
            str = str.split("货号")[0];
        }
        String xssMainRule = "onload|script|onclick|㕷| |・|Ω|₵|¢|º|\u200D|·|ø|！|✖|▪|❤|onerror| |\u200B|\\?|¥|✘|Ø|∅|alert|  |href|eval|\\\\|<|>|~|`|&#|'|=|;|\"|,|™|•|®|\\n|\\r";
        return str.trim().replaceAll(xssMainRule, "").replaceAll("\\s{1,}", " ");
    }

    private Map getTextKeyMap() {
        Map textKeyMap = new HashMap();
        textKeyMap.put("规格", "SPEC");
        textKeyMap.put("包装类型", "PACKING_UNIT");
        textKeyMap.put("建议零售价", "PRICE_RETAIL");
        textKeyMap.put("建议零售价单位", "PRICE_RETAIL_UNIT");
        textKeyMap.put("附加描述", "ADD_INFO");
        textKeyMap.put("注意事项", "ATTENTION");
        textKeyMap.put("贮存条件", "STORAGE_CONDITION");
        textKeyMap.put("子品牌", "SUB_BRAND");
        textKeyMap.put("商品特征", "FEATURES");
        textKeyMap.put("毛重", "GROSS_WEIGHT");
        textKeyMap.put("毛重单位", "GROSS_WEIGHT_UNIT");
        textKeyMap.put("净重", "NET_WEIGHT");
        textKeyMap.put("净重单位", "NET_WEIGHT_UNIT");
        textKeyMap.put("款式描述", "STYLE_DESC");
        textKeyMap.put("功能名称", "FUNC_NAME");
        textKeyMap.put("净含量", "NET_CONTENT");
        textKeyMap.put("净含量单位", "NET_CONTENT_UNIT");
        textKeyMap.put("品牌商", "BRAND_DEALER");
        textKeyMap.put("品牌商地址", "BRAND_DEALER_ADDRESS");
        textKeyMap.put("原文产品名称", "ORI_PRODUCT_NAME");
        textKeyMap.put("原文品牌", "ORI_BRAND");
        textKeyMap.put("原文规格", "ORI_SPEC");
        textKeyMap.put("原文产地", "ORI_MANU");
        textKeyMap.put("高", "HEIGHT");
        textKeyMap.put("宽", "WIDTH");
        textKeyMap.put("深", "DEEPTH");
        textKeyMap.put("单位", "UNIT_NAME");
        textKeyMap.put("login_date", "LOGIN_DATE");
        textKeyMap.put("valid_date", "VALID_DATE");
        textKeyMap.put("firm_code", "FIRM_CODE");
        textKeyMap.put("checkResult", "CHECK_RESULT");
        textKeyMap.put("logout_flag", "LOGOUT_FLAG");
        textKeyMap.put("gS1CompanyPrefix", "GS1_COMPANY_PREFIX");
        textKeyMap.put("英文名称", "GOODS_NAME");
        textKeyMap.put("关键字", "KEY_WORDS");
        textKeyMap.put("销售单位", "SALE_UNIT");
        textKeyMap.put("形态描述", "SHAPE_DESC");
        textKeyMap.put("包装材料", "PACKING_MATERIAL");
        textKeyMap.put("上市时间", "TIME_TO_MARKET");
        textKeyMap.put("简短描述", "SHORT_DESC");
        textKeyMap.put("原料成分", "RAW_MATERIAL");
        textKeyMap.put("停产日期", "SHUTDOWN_DATE");
        textKeyMap.put("生产许可证号", "LICENSE_CODE");
        textKeyMap.put("保质期", "EXP_DATE");
        textKeyMap.put("产地", "ORI_PLACE");
        textKeyMap.put("产品添加剂", "ADDITIVES");
        textKeyMap.put("gpc2020", "GPC2020");

        textKeyMap.put("productName", "PRODUCT_NAME");
        textKeyMap.put("gpcCategoryCode", "GPC_CATEGORY_CODE");
        textKeyMap.put("partyContactAddress", "PARTY_CONTACT_ADDRESS");
        textKeyMap.put("partyContactName", "PARTY_CONTACT_NAME");
        return textKeyMap;
    }

    /**
     * 取云pos单位
     *
     * @return
     */
    private String getUnitId(String unitId) {
        System.out.println("-------------meaunitsMap的大小-------------" + meaunitsMap.size());

        if (unitId == null || "".equals(unitId)) {
            return "000007";//个
        }
        if (meaunitsMap.isEmpty()) {
            System.out.println("-------------meaunitsMap赋值-------------");

            meaunitsMap.put("BA", "000019");
            meaunitsMap.put("BE", "000012");
            meaunitsMap.put("BG", "000009");
            meaunitsMap.put("BO", "000005");
            meaunitsMap.put("BX", "000001");
            meaunitsMap.put("CAS", "000011");
            meaunitsMap.put("CG", "000010");
            meaunitsMap.put("CR", "000011");
            meaunitsMap.put("CU", "000007");
            meaunitsMap.put("CY", "000014");
            meaunitsMap.put("EA", "000004");
            meaunitsMap.put("PK", "000009");
        }
        if (meaunitsMap.containsKey(unitId)) {
            return (String) meaunitsMap.get(unitId);
        } else {
            return "000007";//个
        }
    }

    private static void saveSqlFileMrtdd(String sql, String fileName) {
        try {
            FileWriter public_file_out = new FileWriter("C:\\Users\\lizhenrj\\Desktop\\2222\\" + fileName + ".sql", true);
            public_file_out.write(sql);
            public_file_out.flush();
            public_file_out.close();
        } catch (Exception e) {
            System.out.println(getTrace(e));
        }
    }

    /**
     * 取云pos分类
     *
     * @param oldSortId 中国商品信息网老的分类
     * @param newSortId 中国商品信息网新的分类
     * @return
     */
    private String getSortId(String oldSortId, String newSortId) {
        System.out.println("-------------sortMap的大小-------------" + sortMap.size());

        if (sortMap.isEmpty()) {
            System.out.println("-------------sortMap赋值-------------");
            sortMap.put("10000028", "03000002");
            sortMap.put("10000029", "03000002");
            sortMap.put("10000030", "03000002");
            sortMap.put("10000040", "03000010");
            sortMap.put("10000042", "03000010");
            sortMap.put("10000043", "03000003");
            sortMap.put("10000044", "03000003");
            sortMap.put("10000045", "03000003");
            sortMap.put("10000047", "03000003");
            sortMap.put("10000048", "03000011");
            sortMap.put("10000049", "03000011");
            sortMap.put("10000050", "03000011");
            sortMap.put("10000051", "03000011");
            sortMap.put("10000052", "03000011");
            sortMap.put("10000054", "03000011");
            sortMap.put("10000055", "03000010");
            sortMap.put("10000057", "03000010");
            sortMap.put("10000068", "03000004");
            sortMap.put("10000069", "03000004");
            sortMap.put("10000104", "03000001");
            sortMap.put("10000111", "03000007");
            sortMap.put("10000114", "03000007");
            sortMap.put("10000115", "03000007");
            sortMap.put("10000116", "03000008");
            sortMap.put("10000117", "03000008");
            sortMap.put("10000118", "03000008");
            sortMap.put("10000119", "03000008");
            sortMap.put("10000137", "03000206");
            sortMap.put("10000138", "03000206");
            sortMap.put("10000139", "03000206");
            sortMap.put("10000142", "03000101");
            sortMap.put("10000143", "03000101");
            sortMap.put("10000144", "03000105");
            sortMap.put("10000145", "03000206");
            sortMap.put("10000146", "03000206");
            sortMap.put("10000147", "03000206");
            sortMap.put("10000148", "03000206");
            sortMap.put("10000149", "03000206");
            sortMap.put("10000150", "03000206");
            sortMap.put("10000151", "03000206");
            sortMap.put("10000152", "03000206");
            sortMap.put("10000153", "03000206");
            sortMap.put("10000155", "03000004");
            sortMap.put("10000156", "03000004");
            sortMap.put("10000157", "03000004");
            sortMap.put("10000158", "03000004");
            sortMap.put("10000159", "03000103");
            sortMap.put("10000160", "03000004");
            sortMap.put("10000161", "03000004");
            sortMap.put("10000163", "03000004");
            sortMap.put("10000164", "03000004");
            sortMap.put("10000165", "03000004");
            sortMap.put("10000166", "03000004");
            sortMap.put("10000170", "03000004");
            sortMap.put("10000171", "03000004");
            sortMap.put("10000172", "03000004");
            sortMap.put("10000177", "03000001");
            sortMap.put("10000178", "03000007");
            sortMap.put("10000179", "03000007");
            sortMap.put("10000180", "03000011");
            sortMap.put("10000181", "03000102");
            sortMap.put("10000187", "03000001");
            sortMap.put("10000190", "03000002");
            sortMap.put("10000191", "03000007");
            sortMap.put("10000192", "03000007");
            sortMap.put("10000195", "03000010");
            sortMap.put("10000196", "03000004");
            sortMap.put("10000197", "03000004");
            sortMap.put("10000199", "03000011");
            sortMap.put("10000200", "03000011");
            sortMap.put("10000201", "03000007");
            sortMap.put("10000202", "03000007");
            sortMap.put("10000203", "03000010");
            sortMap.put("10000204", "03000201");
            sortMap.put("10000205", "03000201");
            sortMap.put("10000206", "03000201");
            sortMap.put("10000210", "03000008");
            sortMap.put("10000211", "03000010");
            sortMap.put("10000212", "03000011");
            sortMap.put("10000213", "03000010");
            sortMap.put("10000214", "03000007");
            sortMap.put("10000215", "03000204");
            sortMap.put("10000216", "03000204");
            sortMap.put("10000217", "03000010");
            sortMap.put("10000219", "03000007");
            sortMap.put("10000220", "03000007");
            sortMap.put("10000222", "03000007");
            sortMap.put("10000223", "03000007");
            sortMap.put("10000227", "03000105");
            sortMap.put("10000232", "03000007");
            sortMap.put("10000235", "03000010");
            sortMap.put("10000236", "03000010");
            sortMap.put("10000238", "03000011");
            sortMap.put("10000239", "03000011");
            sortMap.put("10000240", "03000010");
            sortMap.put("10000241", "03000010");
            sortMap.put("10000242", "03000010");
            sortMap.put("10000244", "03000011");
            sortMap.put("10000245", "03000004");
            sortMap.put("10000246", "03000004");
            sortMap.put("10000247", "03000004");
            sortMap.put("10000248", "03000004");
            sortMap.put("10000249", "03000004");
            sortMap.put("10000250", "03000004");
            sortMap.put("10000252", "03000001");
            sortMap.put("10000254", "03000010");
            sortMap.put("10000256", "03000010");
            sortMap.put("10000257", "03000010");
            sortMap.put("10000258", "03000010");
            sortMap.put("10000260", "03000010");
            sortMap.put("10000262", "03000010");
            sortMap.put("10000263", "03000101");
            sortMap.put("10000264", "03000007");
            sortMap.put("10000265", "03000007");
            sortMap.put("10000266", "03000007");
            sortMap.put("10000270", "03000202");
            sortMap.put("10000271", "03000202");
            sortMap.put("10000272", "03000202");
            sortMap.put("10000273", "03000102");
            sortMap.put("10000275", "03000102");
            sortMap.put("10000276", "03000102");
            sortMap.put("10000277", "03000002");
            sortMap.put("10000278", "03000002");
            sortMap.put("10000279", "03000002");
            sortMap.put("10000280", "03000011");
            sortMap.put("10000281", "03000206");
            sortMap.put("10000282", "03000206");
            sortMap.put("10000283", "03000206");
            sortMap.put("10000284", "03000001");
            sortMap.put("10000285", "03000001");
            sortMap.put("10000286", "03000001");
            sortMap.put("10000287", "03000001");
            sortMap.put("10000288", "03000001");
            sortMap.put("10000289", "03000001");
            sortMap.put("10000291", "03000001");
            sortMap.put("10000292", "03000001");
            sortMap.put("10000294", "03000001");
            sortMap.put("10000295", "03000001");
            sortMap.put("10000296", "03000001");
            sortMap.put("10000297", "03000001");
            sortMap.put("10000298", "03000001");
            sortMap.put("10000299", "03000001");
            sortMap.put("10000301", "03000001");
            sortMap.put("10000302", "03000001");
            sortMap.put("10000303", "03000309");
            sortMap.put("10000304", "03000004");
            sortMap.put("10000305", "03000004");
            sortMap.put("10000306", "03000010");
            sortMap.put("10000307", "03000007");
            sortMap.put("10000308", "03000007");
            sortMap.put("10000309", "03000007");
            sortMap.put("10000310", "03000007");
            sortMap.put("10000311", "03000007");
            sortMap.put("10000312", "03000004");
            sortMap.put("10000313", "03000008");
            sortMap.put("10000314", "03000001");
            sortMap.put("10000315", "03000001");
            sortMap.put("10000316", "03000001");
            sortMap.put("10000317", "03000001");
            sortMap.put("10000318", "03000001");
            sortMap.put("10000319", "03000001");
            sortMap.put("10000320", "03000404");
            sortMap.put("10000321", "03000309");
            sortMap.put("10000324", "03000309");
            sortMap.put("10000327", "03000309");
            sortMap.put("10000328", "03000309");
            sortMap.put("10000329", "03000309");
            sortMap.put("10000330", "03000309");
            sortMap.put("10000332", "03000309");
            sortMap.put("10000333", "03000301");
            sortMap.put("10000334", "03000309");
            sortMap.put("10000335", "03000309");
            sortMap.put("10000336", "03000309");
            sortMap.put("10000337", "03000309");
            sortMap.put("10000338", "03000309");
            sortMap.put("10000340", "03000309");
            sortMap.put("10000341", "03000309");
            sortMap.put("10000342", "03000309");
            sortMap.put("10000343", "03000309");
            sortMap.put("10000344", "03000404");
            sortMap.put("10000345", "03000309");
            sortMap.put("10000346", "03000309");
            sortMap.put("10000348", "03000309");
            sortMap.put("10000349", "03000309");
            sortMap.put("10000350", "03000309");
            sortMap.put("10000356", "03000309");
            sortMap.put("10000358", "03000301");
            sortMap.put("10000359", "03000301");
            sortMap.put("10000360", "03000301");
            sortMap.put("10000361", "03000301");
            sortMap.put("10000362", "03000404");
            sortMap.put("10000363", "03000309");
            sortMap.put("10000365", "03000301");
            sortMap.put("10000368", "03000309");
            sortMap.put("10000369", "03000309");
            sortMap.put("10000370", "03000309");
            sortMap.put("10000373", "03000309");
            sortMap.put("10000374", "03000309");
            sortMap.put("10000375", "03000309");
            sortMap.put("10000376", "03000404");
            sortMap.put("10000377", "03000301");
            sortMap.put("10000379", "03000309");
            sortMap.put("10000381", "03000309");
            sortMap.put("10000383", "03000309");
            sortMap.put("10000384", "03000309");
            sortMap.put("10000385", "03000301");
            sortMap.put("10000397", "03000305");
            sortMap.put("10000398", "03000305");
            sortMap.put("10000400", "03000309");
            sortMap.put("10000402", "03000305");
            sortMap.put("10000405", "03000305");
            sortMap.put("10000406", "03000305");
            sortMap.put("10000411", "03000309");
            sortMap.put("10000423", "03000305");
            sortMap.put("10000424", "03000305");
            sortMap.put("10000426", "03000305");
            sortMap.put("10000427", "03000305");
            sortMap.put("10000432", "03000309");
            sortMap.put("10000433", "03000309");
            sortMap.put("10000434", "03000305");
            sortMap.put("10000435", "03000309");
            sortMap.put("10000436", "03000309");
            sortMap.put("10000440", "03000305");
            sortMap.put("10000441", "03000305");
            sortMap.put("10000442", "03000305");
            sortMap.put("10000443", "03000305");
            sortMap.put("10000444", "03000305");
            sortMap.put("10000445", "03000305");
            sortMap.put("10000446", "03000305");
            sortMap.put("10000447", "03000305");
            sortMap.put("10000448", "03000309");
            sortMap.put("10000449", "03000309");
            sortMap.put("10000451", "03000309");
            sortMap.put("10000452", "03000309");
            sortMap.put("10000453", "03000309");
            sortMap.put("10000456", "03000309");
            sortMap.put("10000460", "03000309");
            sortMap.put("10000465", "03000309");
            sortMap.put("10000466", "03000309");
            sortMap.put("10000467", "03000309");
            sortMap.put("10000468", "03000309");
            sortMap.put("10000481", "03000309");
            sortMap.put("10000482", "03000404");
            sortMap.put("10000483", "03000404");
            sortMap.put("10000484", "03000309");
            sortMap.put("10000485", "03000309");
            sortMap.put("10000486", "03000301");
            sortMap.put("10000489", "03000309");
            sortMap.put("10000490", "03000309");
            sortMap.put("10000491", "03000309");
            sortMap.put("10000492", "03000309");
            sortMap.put("10000493", "03000307");
            sortMap.put("10000494", "03000404");
            sortMap.put("10000495", "03000404");
            sortMap.put("10000496", "03000404");
            sortMap.put("10000498", "03000309");
            sortMap.put("10000500", "03000309");
            sortMap.put("10000504", "03000309");
            sortMap.put("10000505", "03000309");
            sortMap.put("10000510", "03000309");
            sortMap.put("10000513", "03000309");
            sortMap.put("10000514", "03000309");
            sortMap.put("10000515", "03000309");
            sortMap.put("10000521", "03000309");
            sortMap.put("10000522", "03000309");
            sortMap.put("10000526", "03000309");
            sortMap.put("10000527", "03000309");
            sortMap.put("10000529", "03000309");
            sortMap.put("10000531", "03000305");
            sortMap.put("10000532", "03000301");
            sortMap.put("10000533", "03000301");
            sortMap.put("10000534", "03000301");
            sortMap.put("10000535", "03000309");
            sortMap.put("10000536", "03000309");
            sortMap.put("10000541", "03000307");
            sortMap.put("10000542", "03000307");
            sortMap.put("10000543", "03000309");
            sortMap.put("10000546", "03000309");
            sortMap.put("10000548", "03000309");
            sortMap.put("10000551", "03000309");
            sortMap.put("10000552", "03000309");
            sortMap.put("10000554", "03000307");
            sortMap.put("10000556", "03000305");
            sortMap.put("10000559", "03000307");
            sortMap.put("10000564", "03000309");
            sortMap.put("10000566", "03000301");
            sortMap.put("10000567", "03000301");
            sortMap.put("10000570", "03000309");
            sortMap.put("10000573", "03000302");
            sortMap.put("10000575", "03000002");
            sortMap.put("10000577", "03000011");
            sortMap.put("10000578", "03000011");
            sortMap.put("10000579", "03000011");
            sortMap.put("10000580", "03000011");
            sortMap.put("10000581", "03000011");
            sortMap.put("10000583", "03000011");
            sortMap.put("10000586", "03000011");
            sortMap.put("10000587", "03000011");
            sortMap.put("10000588", "03000102");
            sortMap.put("10000589", "03000105");
            sortMap.put("10000590", "03000001");
            sortMap.put("10000591", "03000105");
            sortMap.put("10000592", "03000007");
            sortMap.put("10000593", "03000007");
            sortMap.put("10000594", "03000007");
            sortMap.put("10000595", "03000004");
            sortMap.put("10000596", "03000004");
            sortMap.put("10000597", "03000004");
            sortMap.put("10000598", "03000004");
            sortMap.put("10000599", "03000001");
            sortMap.put("10000600", "03000001");
            sortMap.put("10000601", "03000001");
            sortMap.put("10000602", "03000003");
            sortMap.put("10000603", "03000003");
            sortMap.put("10000604", "03000001");
            sortMap.put("10000605", "03000001");
            sortMap.put("10000607", "03000002");
            sortMap.put("10000609", "03000010");
            sortMap.put("10000610", "03000001");
            sortMap.put("10000612", "03000001");
            sortMap.put("10000613", "03000001");
            sortMap.put("10000614", "03000206");
            sortMap.put("10000615", "03000011");
            sortMap.put("10000616", "03000011");
            sortMap.put("10000617", "03000010");
            sortMap.put("10000618", "03000011");
            sortMap.put("10000619", "03000010");
            sortMap.put("10000620", "03000309");
            sortMap.put("10000622", "03000003");
            sortMap.put("10000623", "03000007");
            sortMap.put("10000624", "03000309");
            sortMap.put("10000626", "03000206");
            sortMap.put("10000627", "03000206");
            sortMap.put("10000628", "03000206");
            sortMap.put("10000629", "03000206");
            sortMap.put("10000630", "03000206");
            sortMap.put("10000631", "03000206");
            sortMap.put("10000635", "03000309");
            sortMap.put("10000636", "03000305");
            sortMap.put("10000637", "03000309");
            sortMap.put("10000641", "03000309");
            sortMap.put("10000649", "03000309");
            sortMap.put("10000650", "03000309");
            sortMap.put("10000651", "03000309");
            sortMap.put("10000653", "03000309");
            sortMap.put("10000654", "03000309");
            sortMap.put("10000657", "03000309");
            sortMap.put("10000662", "03000309");
            sortMap.put("10000663", "03000309");
            sortMap.put("10000664", "03000309");
            sortMap.put("10000666", "03000301");
            sortMap.put("10000668", "03000301");
            sortMap.put("10000669", "03000301");
            sortMap.put("10000671", "03000301");
            sortMap.put("10000672", "03000301");
            sortMap.put("10000673", "03000309");
            sortMap.put("10000676", "03000309");
            sortMap.put("10000677", "03000309");
            sortMap.put("10000678", "03000309");
            sortMap.put("10000679", "03000309");
            sortMap.put("10000680", "03000309");
            sortMap.put("10000681", "03000309");
            sortMap.put("10000683", "03000309");
            sortMap.put("10000685", "03000309");
            sortMap.put("10000686", "03000309");
            sortMap.put("10000692", "03000307");
            sortMap.put("10000693", "03000307");
            sortMap.put("10000694", "03000305");
            sortMap.put("10000696", "03000305");
            sortMap.put("10000697", "03000305");
            sortMap.put("10000698", "03000305");
            sortMap.put("10000699", "03000305");
            sortMap.put("10000700", "03000309");
            sortMap.put("10000701", "03000305");
            sortMap.put("10000702", "03000305");
            sortMap.put("10000703", "03000309");
            sortMap.put("10000704", "03000309");
            sortMap.put("10000709", "03000309");
            sortMap.put("10000712", "03000309");
            sortMap.put("10000714", "03000404");
            sortMap.put("10000715", "03000309");
            sortMap.put("10000717", "03000309");
            sortMap.put("10000719", "03000309");
            sortMap.put("10000721", "03000309");
            sortMap.put("10000722", "03000309");
            sortMap.put("10000724", "03000002");
            sortMap.put("10000728", "03000404");
            sortMap.put("10000730", "03000309");
            sortMap.put("10000732", "03000309");
            sortMap.put("10000738", "03000309");
            sortMap.put("10000740", "03000305");
            sortMap.put("10000741", "03000305");
            sortMap.put("10000742", "03000305");
            sortMap.put("10000743", "03000305");
            sortMap.put("10000744", "03000305");
            sortMap.put("10000745", "03000305");
            sortMap.put("10000746", "03000305");
            sortMap.put("10000747", "03000305");
            sortMap.put("10000749", "03000305");
            sortMap.put("10000754", "03000309");
            sortMap.put("10000758", "03000301");
            sortMap.put("10000759", "03000301");
            sortMap.put("10000760", "03000301");
            sortMap.put("10000761", "03000301");
            sortMap.put("10000762", "03000301");
            sortMap.put("10000763", "03000301");
            sortMap.put("10000764", "03000301");
            sortMap.put("10000767", "03000301");
            sortMap.put("10000768", "03000301");
            sortMap.put("10000769", "03000301");
            sortMap.put("10000770", "03000301");
            sortMap.put("10000771", "03000301");
            sortMap.put("10000772", "03000301");
            sortMap.put("10000773", "03000301");
            sortMap.put("10000774", "03000301");
            sortMap.put("10000775", "03000301");
            sortMap.put("10000778", "03000301");
            sortMap.put("10000779", "03000301");
            sortMap.put("10000780", "03000301");
            sortMap.put("10000781", "03000309");
            sortMap.put("10000782", "03000309");
            sortMap.put("10000783", "03000309");
            sortMap.put("10000785", "03000404");
            sortMap.put("10000786", "03000309");
            sortMap.put("10000807", "03000301");
            sortMap.put("10000808", "03000309");
            sortMap.put("10000810", "03000309");
            sortMap.put("10000812", "03000309");
            sortMap.put("10000813", "03000309");
            sortMap.put("10000814", "03000309");
            sortMap.put("10000820", "03000308");
            sortMap.put("10000822", "03000309");
            sortMap.put("10000823", "03000309");
            sortMap.put("10000825", "03000309");
            sortMap.put("10000827", "03000309");
            sortMap.put("10000828", "03000309");
            sortMap.put("10000829", "03000309");
            sortMap.put("10000830", "03000309");
            sortMap.put("10000831", "03000309");
            sortMap.put("10000832", "03000309");
            sortMap.put("10000833", "03000309");
            sortMap.put("10000834", "03000309");
            sortMap.put("10000835", "03000309");
            sortMap.put("10000841", "03000309");
            sortMap.put("10000844", "03000309");
            sortMap.put("10000849", "03000309");
            sortMap.put("10000854", "03000309");
            sortMap.put("10000855", "03000309");
            sortMap.put("10000856", "03000309");
            sortMap.put("10000857", "03000309");
            sortMap.put("10000863", "03000309");
            sortMap.put("10000865", "03000309");
            sortMap.put("10000879", "03000309");
            sortMap.put("10000880", "03000309");
            sortMap.put("10000884", "03000309");
            sortMap.put("10000885", "03000309");
            sortMap.put("10000889", "03000309");
            sortMap.put("10000890", "03000309");
            sortMap.put("10000891", "03000309");
            sortMap.put("10000895", "03000309");
            sortMap.put("10000907", "03000309");
            sortMap.put("10000908", "03000309");
            sortMap.put("10000910", "03000305");
            sortMap.put("10000915", "03000309");
            sortMap.put("10000919", "03000309");
            sortMap.put("10000923", "03000309");
            sortMap.put("10000926", "03000309");
            sortMap.put("10000928", "03000309");
            sortMap.put("10001070", "03000309");
            sortMap.put("10001071", "03000309");
            sortMap.put("10001074", "03000309");
            sortMap.put("10001076", "03000309");
            sortMap.put("10001077", "03000309");
            sortMap.put("10001078", "03000309");
            sortMap.put("10001079", "03000309");
            sortMap.put("10001080", "03000309");
            sortMap.put("10001081", "03000309");
            sortMap.put("10001082", "03000309");
            sortMap.put("10001084", "03000309");
            sortMap.put("10001085", "03000309");
            sortMap.put("10001092", "03000309");
            sortMap.put("10001093", "03000309");
            sortMap.put("10001095", "03000309");
            sortMap.put("10001096", "03000309");
            sortMap.put("10001097", "03000309");
            sortMap.put("10001099", "03000309");
            sortMap.put("10001100", "03000309");
            sortMap.put("10001101", "03000309");
            sortMap.put("10001102", "03000309");
            sortMap.put("10001104", "03000309");
            sortMap.put("10001105", "03000309");
            sortMap.put("10001111", "03000309");
            sortMap.put("10001118", "03000309");
            sortMap.put("10001137", "03000309");
            sortMap.put("10001141", "03000309");
            sortMap.put("10001142", "03000309");
            sortMap.put("10001150", "03000309");
            sortMap.put("10001151", "03000309");
            sortMap.put("10001153", "03000309");
            sortMap.put("10001155", "03000309");
            sortMap.put("10001156", "03000309");
            sortMap.put("10001158", "03000309");
            sortMap.put("10001160", "03000309");
            sortMap.put("10001161", "03000309");
            sortMap.put("10001163", "03000309");
            sortMap.put("10001166", "03000309");
            sortMap.put("10001170", "03000309");
            sortMap.put("10001172", "03000309");
            sortMap.put("10001174", "03000309");
            sortMap.put("10001177", "03000309");
            sortMap.put("10001178", "03000309");
            sortMap.put("10001181", "03000309");
            sortMap.put("10001191", "03000309");
            sortMap.put("10001198", "03000309");
            sortMap.put("10001201", "03000502");
            sortMap.put("10001202", "03000502");
            sortMap.put("10001203", "03000502");
            sortMap.put("10001204", "03000502");
            sortMap.put("10001205", "03000502");
            sortMap.put("10001206", "03000502");
            sortMap.put("10001207", "03000502");
            sortMap.put("10001208", "03000502");
            sortMap.put("10001209", "03000502");
            sortMap.put("10001212", "03000502");
            sortMap.put("10001213", "03000502");
            sortMap.put("10001214", "03000309");
            sortMap.put("10001216", "03000309");
            sortMap.put("10001217", "03000309");
            sortMap.put("10001221", "03000309");
            sortMap.put("10001225", "03000503");
            sortMap.put("10001226", "03000503");
            sortMap.put("10001228", "03000503");
            sortMap.put("10001229", "03000503");
            sortMap.put("10001230", "03000503");
            sortMap.put("10001231", "03000503");
            sortMap.put("10001232", "03000503");
            sortMap.put("10001233", "03000503");
            sortMap.put("10001234", "03000503");
            sortMap.put("10001235", "03000503");
            sortMap.put("10001236", "03000503");
            sortMap.put("10001241", "03000503");
            sortMap.put("10001242", "03000503");
            sortMap.put("10001243", "03000503");
            sortMap.put("10001245", "03000503");
            sortMap.put("10001246", "03000503");
            sortMap.put("10001247", "03000503");
            sortMap.put("10001248", "03000503");
            sortMap.put("10001250", "03000503");
            sortMap.put("10001251", "03000503");
            sortMap.put("10001252", "03000503");
            sortMap.put("10001253", "03000503");
            sortMap.put("10001254", "03000503");
            sortMap.put("10001255", "03000503");
            sortMap.put("10001256", "03000503");
            sortMap.put("10001257", "03000503");
            sortMap.put("10001258", "03000503");
            sortMap.put("10001259", "03000503");
            sortMap.put("10001260", "03000503");
            sortMap.put("10001261", "03000503");
            sortMap.put("10001262", "03000503");
            sortMap.put("10001263", "03000503");
            sortMap.put("10001264", "03000503");
            sortMap.put("10001265", "03000503");
            sortMap.put("10001266", "03000503");
            sortMap.put("10001267", "03000503");
            sortMap.put("10001268", "03000503");
            sortMap.put("10001269", "03000503");
            sortMap.put("10001270", "03000503");
            sortMap.put("10001272", "03000503");
            sortMap.put("10001273", "03000503");
            sortMap.put("10001275", "03000503");
            sortMap.put("10001276", "03000503");
            sortMap.put("10001277", "03000503");
            sortMap.put("10001278", "03000503");
            sortMap.put("10001280", "03000503");
            sortMap.put("10001281", "03000503");
            sortMap.put("10001283", "03000503");
            sortMap.put("10001286", "03000503");
            sortMap.put("10001287", "03000503");
            sortMap.put("10001288", "03000503");
            sortMap.put("10001289", "03000503");
            sortMap.put("10001292", "03000503");
            sortMap.put("10001295", "03000503");
            sortMap.put("10001297", "03000503");
            sortMap.put("10001298", "03000503");
            sortMap.put("10001299", "03000503");
            sortMap.put("10001300", "03000503");
            sortMap.put("10001302", "03000503");
            sortMap.put("10001304", "03000503");
            sortMap.put("10001305", "03000503");
            sortMap.put("10001306", "03000503");
            sortMap.put("10001308", "03000503");
            sortMap.put("10001309", "03000503");
            sortMap.put("10001311", "03000503");
            sortMap.put("10001312", "03000503");
            sortMap.put("10001313", "03000503");
            sortMap.put("10001314", "03000503");
            sortMap.put("10001316", "03000503");
            sortMap.put("10001318", "03000503");
            sortMap.put("10001320", "03000503");
            sortMap.put("10001321", "03000503");
            sortMap.put("10001322", "03000503");
            sortMap.put("10001323", "03000503");
            sortMap.put("10001325", "03000503");
            sortMap.put("10001326", "03000309");
            sortMap.put("10001327", "03000309");
            sortMap.put("10001328", "03000309");
            sortMap.put("10001329", "03000309");
            sortMap.put("10001330", "03000309");
            sortMap.put("10001331", "03000309");
            sortMap.put("10001332", "03000309");
            sortMap.put("10001333", "03000309");
            sortMap.put("10001334", "03000309");
            sortMap.put("10001335", "03000309");
            sortMap.put("10001338", "03000309");
            sortMap.put("10001339", "03000309");
            sortMap.put("10001340", "03000309");
            sortMap.put("10001341", "03000309");
            sortMap.put("10001342", "03000309");
            sortMap.put("10001343", "03000309");
            sortMap.put("10001344", "03000309");
            sortMap.put("10001345", "03000309");
            sortMap.put("10001346", "03000309");
            sortMap.put("10001347", "03000309");
            sortMap.put("10001348", "03000309");
            sortMap.put("10001349", "03000309");
            sortMap.put("10001350", "03000309");
            sortMap.put("10001351", "03000309");
            sortMap.put("10001352", "03000309");
            sortMap.put("10001354", "03000309");
            sortMap.put("10001355", "03000309");
            sortMap.put("10001356", "03000309");
            sortMap.put("10001358", "03000309");
            sortMap.put("10001359", "03000309");
            sortMap.put("10001360", "03000309");
            sortMap.put("10001361", "03000309");
            sortMap.put("10001362", "03000309");
            sortMap.put("10001364", "03000309");
            sortMap.put("10001366", "03000309");
            sortMap.put("10001379", "03000309");
            sortMap.put("10001380", "03000309");
            sortMap.put("10001382", "03000309");
            sortMap.put("10001383", "03000309");
            sortMap.put("10001385", "03000309");
            sortMap.put("10001386", "03000309");
            sortMap.put("10001389", "03000309");
            sortMap.put("10001390", "03000309");
            sortMap.put("10001394", "03000309");
            sortMap.put("10001395", "03000309");
            sortMap.put("10001397", "03000309");
            sortMap.put("10001398", "03000309");
            sortMap.put("10001400", "03000309");
            sortMap.put("10001418", "03000309");
            sortMap.put("10001419", "03000309");
            sortMap.put("10001423", "03000309");
            sortMap.put("10001427", "03000309");
            sortMap.put("10001428", "03000309");
            sortMap.put("10001429", "03000309");
            sortMap.put("10001435", "03000309");
            sortMap.put("10001448", "03000309");
            sortMap.put("10001452", "03000309");
            sortMap.put("10001467", "03000309");
            sortMap.put("10001470", "03000309");
            sortMap.put("10001476", "03000309");
            sortMap.put("10001477", "03000309");
            sortMap.put("10001484", "03000309");
            sortMap.put("10001485", "03000309");
            sortMap.put("10001501", "03000309");
            sortMap.put("10001523", "03000309");
            sortMap.put("10001674", "03000502");
            sortMap.put("10001676", "03000502");
            sortMap.put("10001677", "03000502");
            sortMap.put("10001678", "03000502");
            sortMap.put("10001679", "03000502");
            sortMap.put("10001680", "03000502");
            sortMap.put("10001681", "03000502");
            sortMap.put("10001682", "03000502");
            sortMap.put("10001683", "03000502");
            sortMap.put("10001684", "03000502");
            sortMap.put("10001685", "03000502");
            sortMap.put("10001686", "03000502");
            sortMap.put("10001688", "03000502");
            sortMap.put("10001689", "03000502");
            sortMap.put("10001690", "03000502");
            sortMap.put("10001691", "03000502");
            sortMap.put("10001692", "03000502");
            sortMap.put("10001693", "03000502");
            sortMap.put("10001694", "03000502");
            sortMap.put("10001695", "03000502");
            sortMap.put("10001696", "03000502");
            sortMap.put("10001697", "03000502");
            sortMap.put("10001698", "03000502");
            sortMap.put("10001699", "03000502");
            sortMap.put("10001700", "03000502");
            sortMap.put("10001701", "03000502");
            sortMap.put("10001702", "03000502");
            sortMap.put("10001705", "03000502");
            sortMap.put("10001706", "03000502");
            sortMap.put("10001707", "03000502");
            sortMap.put("10001710", "03000502");
            sortMap.put("10001711", "03000502");
            sortMap.put("10001712", "03000502");
            sortMap.put("10001713", "03000502");
            sortMap.put("10001714", "03000502");
            sortMap.put("10001715", "03000502");
            sortMap.put("10001716", "03000502");
            sortMap.put("10001717", "03000502");
            sortMap.put("10001718", "03000502");
            sortMap.put("10001719", "03000502");
            sortMap.put("10001720", "03000502");
            sortMap.put("10001721", "03000502");
            sortMap.put("10001722", "03000502");
            sortMap.put("10001723", "03000502");
            sortMap.put("10001724", "03000502");
            sortMap.put("10001725", "03000502");
            sortMap.put("10001726", "03000502");
            sortMap.put("10001727", "03000502");
            sortMap.put("10001729", "03000502");
            sortMap.put("10001730", "03000502");
            sortMap.put("10001731", "03000502");
            sortMap.put("10001732", "03000502");
            sortMap.put("10001734", "03000502");
            sortMap.put("10001735", "03000502");
            sortMap.put("10001736", "03000502");
            sortMap.put("10001737", "03000502");
            sortMap.put("10001738", "03000502");
            sortMap.put("10001739", "03000502");
            sortMap.put("10001740", "03000502");
            sortMap.put("10001741", "03000502");
            sortMap.put("10001742", "03000502");
            sortMap.put("10001743", "03000502");
            sortMap.put("10001744", "03000502");
            sortMap.put("10001746", "03000502");
            sortMap.put("10001748", "03000502");
            sortMap.put("10001749", "03000502");
            sortMap.put("10001750", "03000502");
            sortMap.put("10001752", "03000502");
            sortMap.put("10001753", "03000502");
            sortMap.put("10001754", "03000502");
            sortMap.put("10001755", "03000502");
            sortMap.put("10001756", "03000502");
            sortMap.put("10001757", "03000502");
            sortMap.put("10001758", "03000502");
            sortMap.put("10001759", "03000502");
            sortMap.put("10001760", "03000502");
            sortMap.put("10001761", "03000309");
            sortMap.put("10001764", "03000309");
            sortMap.put("10001768", "03000309");
            sortMap.put("10001770", "03000309");
            sortMap.put("10001775", "03000309");
            sortMap.put("10001776", "03000309");
            sortMap.put("10001798", "03000309");
            sortMap.put("10001815", "03000309");
            sortMap.put("10001819", "03000309");
            sortMap.put("10001823", "03000309");
            sortMap.put("10001824", "03000309");
            sortMap.put("10001825", "03000309");
            sortMap.put("10001830", "03000309");
            sortMap.put("10001847", "03000309");
            sortMap.put("10001852", "03000309");
            sortMap.put("10001853", "03000309");
            sortMap.put("10001878", "03000309");
            sortMap.put("10001903", "03000309");
            sortMap.put("10001905", "03000309");
            sortMap.put("10001912", "03000309");
            sortMap.put("10001913", "03000309");
            sortMap.put("10001915", "03000309");
            sortMap.put("10001916", "03000309");
            sortMap.put("10001917", "03000309");
            sortMap.put("10001920", "03000309");
            sortMap.put("10001922", "03000309");
            sortMap.put("10001923", "03000309");
            sortMap.put("10001928", "03000308");
            sortMap.put("10001929", "03000308");
            sortMap.put("10001930", "03000308");
            sortMap.put("10001931", "03000308");
            sortMap.put("10001938", "03000308");
            sortMap.put("10001939", "03000308");
            sortMap.put("10001940", "03000308");
            sortMap.put("10001941", "03000308");
            sortMap.put("10001942", "03000308");
            sortMap.put("10001950", "03000308");
            sortMap.put("10001951", "03000308");
            sortMap.put("10001952", "03000308");
            sortMap.put("10001953", "03000308");
            sortMap.put("10001954", "03000308");
            sortMap.put("10001955", "03000308");
            sortMap.put("10001956", "03000308");
            sortMap.put("10001957", "03000308");
            sortMap.put("10001958", "03000308");
            sortMap.put("10001959", "03000308");
            sortMap.put("10001961", "03000308");
            sortMap.put("10001962", "03000308");
            sortMap.put("10001963", "03000308");
            sortMap.put("10001964", "03000308");
            sortMap.put("10001965", "03000308");
            sortMap.put("10001966", "03000308");
            sortMap.put("10001967", "03000308");
            sortMap.put("10001968", "03000308");
            sortMap.put("10001969", "03000308");
            sortMap.put("10001970", "03000308");
            sortMap.put("10001971", "03000308");
            sortMap.put("10001972", "03000308");
            sortMap.put("10001974", "03000308");
            sortMap.put("10001975", "03000308");
            sortMap.put("10001976", "03000308");
            sortMap.put("10001977", "03000308");
            sortMap.put("10001978", "03000308");
            sortMap.put("10001979", "03000308");
            sortMap.put("10001980", "03000308");
            sortMap.put("10001981", "03000308");
            sortMap.put("10001982", "03000308");
            sortMap.put("10001983", "03000308");
            sortMap.put("10001984", "03000308");
            sortMap.put("10001985", "03000308");
            sortMap.put("10001986", "03000308");
            sortMap.put("10001987", "03000308");
            sortMap.put("10001988", "03000308");
            sortMap.put("10001989", "03000308");
            sortMap.put("10001990", "03000308");
            sortMap.put("10001991", "03000308");
            sortMap.put("10001998", "03000308");
            sortMap.put("10002000", "03000308");
            sortMap.put("10002002", "03000308");
            sortMap.put("10002003", "03000308");
            sortMap.put("10002004", "03000308");
            sortMap.put("10002005", "03000308");
            sortMap.put("10002006", "03000308");
            sortMap.put("10002007", "03000308");
            sortMap.put("10002011", "03000308");
            sortMap.put("10002012", "03000308");
            sortMap.put("10002013", "03000308");
            sortMap.put("10002014", "03000308");
            sortMap.put("10002015", "03000308");
            sortMap.put("10002016", "03000308");
            sortMap.put("10002018", "03000308");
            sortMap.put("10002019", "03000308");
            sortMap.put("10002020", "03000308");
            sortMap.put("10002021", "03000308");
            sortMap.put("10002022", "03000308");
            sortMap.put("10002023", "03000306");
            sortMap.put("10002024", "03000306");
            sortMap.put("10002025", "03000306");
            sortMap.put("10002026", "03000306");
            sortMap.put("10002027", "03000306");
            sortMap.put("10002028", "03000308");
            sortMap.put("10002029", "03000308");
            sortMap.put("10002030", "03000308");
            sortMap.put("10002031", "03000308");
            sortMap.put("10002032", "03000308");
            sortMap.put("10002033", "03000308");
            sortMap.put("10002034", "03000308");
            sortMap.put("10002035", "03000308");
            sortMap.put("10002070", "03000309");
            sortMap.put("10002073", "03000309");
            sortMap.put("10002076", "03000309");
            sortMap.put("10002077", "03000309");
            sortMap.put("10002078", "03000309");
            sortMap.put("10002095", "03000309");
            sortMap.put("10002101", "03000309");
            sortMap.put("10002102", "03000309");
            sortMap.put("10002103", "03000309");
            sortMap.put("10002118", "03000309");
            sortMap.put("10002121", "03000307");
            sortMap.put("10002122", "03000307");
            sortMap.put("10002123", "03000307");
            sortMap.put("10002124", "03000307");
            sortMap.put("10002125", "03000309");
            sortMap.put("10002127", "03000307");
            sortMap.put("10002128", "03000307");
            sortMap.put("10002129", "03000307");
            sortMap.put("10002130", "03000307");
            sortMap.put("10002131", "03000309");
            sortMap.put("10002133", "03000307");
            sortMap.put("10002134", "03000307");
            sortMap.put("10002135", "03000307");
            sortMap.put("10002136", "03000307");
            sortMap.put("10002139", "03000307");
            sortMap.put("10002140", "03000307");
            sortMap.put("10002141", "03000307");
            sortMap.put("10002142", "03000307");
            sortMap.put("10002143", "03000307");
            sortMap.put("10002144", "03000307");
            sortMap.put("10002146", "03000307");
            sortMap.put("10002147", "03000307");
            sortMap.put("10002148", "03000307");
            sortMap.put("10002149", "03000307");
            sortMap.put("10002150", "03000307");
            sortMap.put("10002151", "03000307");
            sortMap.put("10002152", "03000307");
            sortMap.put("10002153", "03000309");
            sortMap.put("10002154", "03000309");
            sortMap.put("10002155", "03000309");
            sortMap.put("10002158", "03000309");
            sortMap.put("10002159", "03000309");
            sortMap.put("10002163", "03000309");
            sortMap.put("10002168", "03000307");
            sortMap.put("10002169", "03000307");
            sortMap.put("10002170", "03000307");
            sortMap.put("10002171", "03000307");
            sortMap.put("10002172", "03000307");
            sortMap.put("10002173", "03000307");
            sortMap.put("10002174", "03000307");
            sortMap.put("10002175", "03000307");
            sortMap.put("10002176", "03000307");
            sortMap.put("10002177", "03000307");
            sortMap.put("10002178", "03000307");
            sortMap.put("10002183", "03000307");
            sortMap.put("10002184", "03000309");
            sortMap.put("10002187", "03000309");
            sortMap.put("10002189", "03000309");
            sortMap.put("10002192", "03000309");
            sortMap.put("10002193", "03000309");
            sortMap.put("10002197", "03000309");
            sortMap.put("10002199", "03000309");
            sortMap.put("10002200", "03000309");
            sortMap.put("10002201", "03000309");
            sortMap.put("10002202", "03000309");
            sortMap.put("10002210", "03000309");
            sortMap.put("10002218", "03000309");
            sortMap.put("10002219", "03000309");
            sortMap.put("10002220", "03000309");
            sortMap.put("10002221", "03000309");
            sortMap.put("10002222", "03000309");
            sortMap.put("10002225", "03000309");
            sortMap.put("10002227", "03000309");
            sortMap.put("10002228", "03000309");
            sortMap.put("10002229", "03000309");
            sortMap.put("10002230", "03000309");
            sortMap.put("10002231", "03000309");
            sortMap.put("10002234", "03000309");
            sortMap.put("10002236", "03000309");
            sortMap.put("10002240", "03000309");
            sortMap.put("10002241", "03000309");
            sortMap.put("10002245", "03000309");
            sortMap.put("10002252", "03000309");
            sortMap.put("10002423", "03000309");
            sortMap.put("10002424", "03000309");
            sortMap.put("10002425", "03000309");
            sortMap.put("10002426", "03000309");
            sortMap.put("10002462", "03000309");
            sortMap.put("10002505", "03000309");
            sortMap.put("10002586", "03000309");
            sortMap.put("10002592", "03000309");
            sortMap.put("10002597", "03000309");
            sortMap.put("10002599", "03000309");
            sortMap.put("10002608", "03000309");
            sortMap.put("10002610", "03000309");
            sortMap.put("10002612", "03000309");
            sortMap.put("10002614", "03000309");
            sortMap.put("10002627", "03000309");
            sortMap.put("10002654", "03000309");
            sortMap.put("10002672", "03000309");
            sortMap.put("10002757", "03000309");
            sortMap.put("10002764", "03000309");
            sortMap.put("10002767", "03000309");
            sortMap.put("10002776", "03000309");
            sortMap.put("10002777", "03000309");
            sortMap.put("10002781", "03000309");
            sortMap.put("10002825", "03000309");
            sortMap.put("10002849", "03000309");
            sortMap.put("10002856", "03000309");
            sortMap.put("10002888", "03000309");
            sortMap.put("10002920", "03000309");
            sortMap.put("10002949", "03000309");
            sortMap.put("10002950", "03000309");
            sortMap.put("10002981", "03000309");
            sortMap.put("10003014", "03000309");
            sortMap.put("10003081", "03000309");
            sortMap.put("10003171", "03000309");
            sortMap.put("10003173", "03000309");
            sortMap.put("10003183", "03000309");
            sortMap.put("10003187", "03000309");
            sortMap.put("10003194", "03000309");
            sortMap.put("10003195", "03000309");
            sortMap.put("10003206", "03000309");
            sortMap.put("10003207", "03000309");
            sortMap.put("10003210", "03000309");
            sortMap.put("10003227", "03000309");
            sortMap.put("10003234", "03000309");
            sortMap.put("10003246", "03000309");
            sortMap.put("10003254", "03000309");
            sortMap.put("10003267", "03000309");
            sortMap.put("10003270", "03000309");
            sortMap.put("10003291", "03000309");
            sortMap.put("10003305", "03000309");
            sortMap.put("10003313", "03000309");
            sortMap.put("10003321", "03000309");
            sortMap.put("10003352", "03000309");
            sortMap.put("10003379", "03000309");
            sortMap.put("10003392", "03000309");
            sortMap.put("10003440", "03000309");
            sortMap.put("10003454", "03000309");
            sortMap.put("10003455", "03000309");
            sortMap.put("10003458", "03000309");
            sortMap.put("10003482", "03000309");
            sortMap.put("10003492", "03000309");
            sortMap.put("10003500", "03000309");
            sortMap.put("10003507", "03000309");
            sortMap.put("10003528", "03000309");
            sortMap.put("10003576", "03000309");
            sortMap.put("10003586", "03000309");
            sortMap.put("10003645", "03000309");
            sortMap.put("10003653", "03000309");
            sortMap.put("10003654", "03000309");
            sortMap.put("10003676", "03000309");
            sortMap.put("10003685", "03000309");
            sortMap.put("10003686", "03000309");
            sortMap.put("10003689", "03000309");
            sortMap.put("10003690", "03000308");
            sortMap.put("10003691", "03000308");
            sortMap.put("10003692", "03000308");
            sortMap.put("10003694", "03000308");
            sortMap.put("10003695", "03000308");
            sortMap.put("10003698", "03000308");
            sortMap.put("10003704", "03000309");
            sortMap.put("10003705", "03000309");
            sortMap.put("10003707", "03000309");
            sortMap.put("10003708", "03000309");
            sortMap.put("10003709", "03000309");
            sortMap.put("10003710", "03000308");
            sortMap.put("10003711", "03000308");
            sortMap.put("10003712", "03000308");
            sortMap.put("10003713", "03000308");
            sortMap.put("10003750", "03000309");
            sortMap.put("10003753", "03000309");
            sortMap.put("10003763", "03000309");
            sortMap.put("10003764", "03000309");
            sortMap.put("10003771", "03000503");
            sortMap.put("10003773", "03000309");
            sortMap.put("10003776", "03000309");
            sortMap.put("10003777", "03000309");
            sortMap.put("10003779", "03000309");
            sortMap.put("10003799", "03000309");
            sortMap.put("10003813", "03000309");
            sortMap.put("10003814", "03000309");
            sortMap.put("10003816", "03000309");
            sortMap.put("10003818", "03000309");
            sortMap.put("10003819", "03000309");
            sortMap.put("10003823", "03000309");
            sortMap.put("10003824", "03000309");
            sortMap.put("10003852", "03000309");
            sortMap.put("10003872", "03000309");
            sortMap.put("10003918", "03000309");
            sortMap.put("10003988", "03000309");
            sortMap.put("10003992", "03000308");
            sortMap.put("10003998", "03000309");
            sortMap.put("10004027", "03000309");
            sortMap.put("10004033", "03000309");
            sortMap.put("10004034", "03000309");
            sortMap.put("10004062", "03000309");
            sortMap.put("10004063", "03000309");
            sortMap.put("10004097", "03000309");
            sortMap.put("10004103", "03000309");
            sortMap.put("10004107", "03000309");
            sortMap.put("10004113", "03000309");
            sortMap.put("10004114", "03000309");
            sortMap.put("10004115", "03000309");
            sortMap.put("10004119", "03000309");
            sortMap.put("10004122", "03000309");
            sortMap.put("10004126", "03000309");
            sortMap.put("10004127", "03000309");
            sortMap.put("10004128", "03000309");
            sortMap.put("10005098", "03000309");
            sortMap.put("10005105", "03000309");
            sortMap.put("10005106", "03000309");
            sortMap.put("10005107", "03000309");
            sortMap.put("10005108", "03000309");
            sortMap.put("10005109", "03000309");
            sortMap.put("10005110", "03000309");
            sortMap.put("10005111", "03000309");
            sortMap.put("10005112", "03000309");
            sortMap.put("10005115", "03000309");
            sortMap.put("10005116", "03000309");
            sortMap.put("10005117", "03000309");
            sortMap.put("10005118", "03000503");
            sortMap.put("10005119", "03000503");
            sortMap.put("10005120", "03000503");
            sortMap.put("10005121", "03000503");
            sortMap.put("10005125", "03000503");
            sortMap.put("10005126", "03000503");
            sortMap.put("10005127", "03000309");
            sortMap.put("10005131", "03000309");
            sortMap.put("10005133", "03000405");
            sortMap.put("10005134", "03000405");
            sortMap.put("10005135", "03000405");
            sortMap.put("10005136", "03000405");
            sortMap.put("10005137", "03000405");
            sortMap.put("10005138", "03000405");
            sortMap.put("10005139", "03000405");
            sortMap.put("10005140", "03000405");
            sortMap.put("10005141", "03000405");
            sortMap.put("10005142", "03000405");
            sortMap.put("10005143", "03000405");
            sortMap.put("10005144", "03000405");
            sortMap.put("10005145", "03000405");
            sortMap.put("10005146", "03000405");
            sortMap.put("10005147", "03000405");
            sortMap.put("10005148", "03000405");
            sortMap.put("10005149", "03000405");
            sortMap.put("10005150", "03000405");
            sortMap.put("10005151", "03000405");
            sortMap.put("10005152", "03000405");
            sortMap.put("10005153", "03000405");
            sortMap.put("10005154", "03000405");
            sortMap.put("10005155", "03000405");
            sortMap.put("10005156", "03000405");
            sortMap.put("10005157", "03000405");
            sortMap.put("10005158", "03000405");
            sortMap.put("10005159", "03000405");
            sortMap.put("10005160", "03000405");
            sortMap.put("10005161", "03000405");
            sortMap.put("10005162", "03000405");
            sortMap.put("10005163", "03000405");
            sortMap.put("10005164", "03000405");
            sortMap.put("10005165", "03000405");
            sortMap.put("10005166", "03000405");
            sortMap.put("10005167", "03000405");
            sortMap.put("10005168", "03000405");
            sortMap.put("10005169", "03000405");
            sortMap.put("10005170", "03000405");
            sortMap.put("10005171", "03000405");
            sortMap.put("10005177", "03000309");
            sortMap.put("10005178", "03000309");
            sortMap.put("10005180", "03000309");
            sortMap.put("10005181", "03000309");
            sortMap.put("10005183", "03000309");
            sortMap.put("10005185", "03000309");
            sortMap.put("10005186", "03000309");
            sortMap.put("10005190", "03000309");
            sortMap.put("10005193", "03000309");
            sortMap.put("10005194", "03000309");
            sortMap.put("10005195", "03000309");
            sortMap.put("10005196", "03000309");
            sortMap.put("10005201", "03000307");
            sortMap.put("10005204", "03000309");
            sortMap.put("10005206", "03000503");
            sortMap.put("10005208", "03000307");
            sortMap.put("10005209", "03000307");
            sortMap.put("10005216", "03000309");
            sortMap.put("10005219", "03000309");
            sortMap.put("10005226", "03000309");
            sortMap.put("10005227", "03000002");
            sortMap.put("10005228", "03000002");
            sortMap.put("10005229", "03000503");
            sortMap.put("10005234", "03000309");
            sortMap.put("10005249", "03000309");
            sortMap.put("10005250", "03000309");
            sortMap.put("10005254", "03000309");
            sortMap.put("10005255", "03000309");
            sortMap.put("10005262", "03000309");
            sortMap.put("10005264", "03000309");
            sortMap.put("10005266", "03000309");
            sortMap.put("10005267", "03000309");
            sortMap.put("10005272", "03000309");
            sortMap.put("10005280", "03000309");
            sortMap.put("10005283", "03000309");
            sortMap.put("10005316", "03000309");
            sortMap.put("10005317", "03000308");
            sortMap.put("10005322", "03000308");
            sortMap.put("10005331", "03000308");
            sortMap.put("10005332", "03000308");
            sortMap.put("10005333", "03000308");
            sortMap.put("10005334", "03000308");
            sortMap.put("10005335", "03000308");
            sortMap.put("10005336", "03000308");
            sortMap.put("10005337", "03000308");
            sortMap.put("10005356", "03000309");
            sortMap.put("10005357", "03000308");
            sortMap.put("10005358", "03000308");
            sortMap.put("10005359", "03000308");
            sortMap.put("10005365", "03000308");
            sortMap.put("10005371", "03000503");
            sortMap.put("10005372", "03000502");
            sortMap.put("10005378", "03000309");
            sortMap.put("10005386", "03000309");
            sortMap.put("10005387", "03000309");
            sortMap.put("10005400", "03000309");
            sortMap.put("10005414", "03000309");
            sortMap.put("10005415", "03000309");
            sortMap.put("10005418", "03000309");
            sortMap.put("10005426", "03000307");
            sortMap.put("10005429", "03000307");
            sortMap.put("10005430", "03000307");
            sortMap.put("10005434", "03000307");
            sortMap.put("10005435", "03000307");
            sortMap.put("10005439", "03000405");
            sortMap.put("10005440", "03000405");
            sortMap.put("10005442", "03000405");
            sortMap.put("10005443", "03000309");
            sortMap.put("10005444", "03000503");
            sortMap.put("10005445", "03000503");
            sortMap.put("10005449", "03000309");
            sortMap.put("10005470", "03000307");
            sortMap.put("10005479", "03000309");
            sortMap.put("10005541", "03000309");
            sortMap.put("10005559", "03000309");
            sortMap.put("10005567", "03000309");
            sortMap.put("10005572", "03000309");
            sortMap.put("10005573", "03000309");
            sortMap.put("10005576", "03000309");
            sortMap.put("10005583", "03000309");
            sortMap.put("10005586", "03000309");
            sortMap.put("10005631", "03000309");
            sortMap.put("10005633", "03000309");
            sortMap.put("10005637", "03000309");
            sortMap.put("10005638", "03000309");
            sortMap.put("10005639", "03000309");
            sortMap.put("10005641", "03000309");
            sortMap.put("10005642", "03000309");
            sortMap.put("10005643", "03000309");
            sortMap.put("10005644", "03000309");
            sortMap.put("10005645", "03000309");
            sortMap.put("10005646", "03000309");
            sortMap.put("10005650", "03000309");
            sortMap.put("10005661", "03000309");
            sortMap.put("10005667", "03000309");
            sortMap.put("10005669", "03000309");
            sortMap.put("10005675", "03000307");
            sortMap.put("10005676", "03000503");
            sortMap.put("10005681", "03000309");
            sortMap.put("10005684", "03000309");
            sortMap.put("10005685", "03000309");
            sortMap.put("10005686", "03000309");
            sortMap.put("10005689", "03000308");
            sortMap.put("10005690", "03000308");
            sortMap.put("10005691", "03000308");
            sortMap.put("10005692", "03000309");
            sortMap.put("10005693", "03000309");
            sortMap.put("10005694", "03000307");
            sortMap.put("10005695", "03000308");
            sortMap.put("10005697", "03000308");
            sortMap.put("10005701", "03000307");
            sortMap.put("10005703", "03000309");
            sortMap.put("10005704", "03000308");
            sortMap.put("10005707", "03000309");
            sortMap.put("10005710", "03000309");
            sortMap.put("10005712", "03000405");
            sortMap.put("10005713", "03000502");
            sortMap.put("10005715", "03000309");
            sortMap.put("10005723", "03000309");
            sortMap.put("10005726", "03000309");
            sortMap.put("10005727", "03000309");
            sortMap.put("10005741", "03000309");
            sortMap.put("10005745", "03000309");
            sortMap.put("10005754", "03000309");
            sortMap.put("10005756", "03000309");
            sortMap.put("10005758", "03000309");
            sortMap.put("10005761", "03000309");
            sortMap.put("10005762", "03000308");
            sortMap.put("10005764", "03000309");
            sortMap.put("10005766", "03000503");
            sortMap.put("10005767", "03000203");
            sortMap.put("10005768", "03000203");
            sortMap.put("10005769", "03000203");
            sortMap.put("10005770", "03000203");
            sortMap.put("10005771", "03000203");
            sortMap.put("10005772", "03000203");
            sortMap.put("10005773", "03000203");
            sortMap.put("10005774", "03000203");
            sortMap.put("10005776", "03000203");
            sortMap.put("10005777", "03000203");
            sortMap.put("10005778", "03000203");
            sortMap.put("10005779", "03000203");
            sortMap.put("10005780", "03000203");
            sortMap.put("10005781", "03000203");
            sortMap.put("10005782", "03000203");
            sortMap.put("10005783", "03000203");
            sortMap.put("10005784", "03000203");
            sortMap.put("10005785", "03000203");
            sortMap.put("10005786", "03000203");
            sortMap.put("10005787", "03000203");
            sortMap.put("10005788", "03000203");
            sortMap.put("10005789", "03000203");
            sortMap.put("10005790", "03000203");
            sortMap.put("10005791", "03000203");
            sortMap.put("10005792", "03000203");
            sortMap.put("10005793", "03000203");
            sortMap.put("10005795", "03000203");
            sortMap.put("10005796", "03000203");
            sortMap.put("10005797", "03000203");
            sortMap.put("10005798", "03000203");
            sortMap.put("10005799", "03000203");
            sortMap.put("10005800", "03000203");
            sortMap.put("10005801", "03000203");
            sortMap.put("10005802", "03000203");
            sortMap.put("10005803", "03000203");
            sortMap.put("10005804", "03000203");
            sortMap.put("10005811", "03000308");
            sortMap.put("10005817", "03000309");
            sortMap.put("10005822", "03000001");
            sortMap.put("10005823", "03000203");
            sortMap.put("10005825", "03000203");
            sortMap.put("10005827", "03000203");
            sortMap.put("10005830", "03000306");
            sortMap.put("10005832", "03000203");
            sortMap.put("10005833", "03000203");
            sortMap.put("10005834", "03000203");
            sortMap.put("10005835", "03000203");
            sortMap.put("10005836", "03000203");
            sortMap.put("10005837", "03000203");
            sortMap.put("10005838", "03000203");
            sortMap.put("10005839", "03000309");
            sortMap.put("10005840", "03000203");
            sortMap.put("10005841", "03000309");
            sortMap.put("10005844", "03000309");
            sortMap.put("10005845", "03000309");
            sortMap.put("10005846", "03000309");
            sortMap.put("10005847", "03000309");
            sortMap.put("10005848", "03000309");
            sortMap.put("10005849", "03000309");
            sortMap.put("10005851", "03000309");
            sortMap.put("10005858", "03000309");
            sortMap.put("10005868", "03000308");
            sortMap.put("10005876", "03000201");
            sortMap.put("10005877", "03000201");
            sortMap.put("10005878", "03000201");
            sortMap.put("10005879", "03000201");
            sortMap.put("10005880", "03000201");
            sortMap.put("10005881", "03000201");
            sortMap.put("10005882", "03000201");
            sortMap.put("10005883", "03000201");
            sortMap.put("10005884", "03000201");
            sortMap.put("10005885", "03000201");
            sortMap.put("10005886", "03000201");
            sortMap.put("10005887", "03000201");
            sortMap.put("10005888", "03000201");
            sortMap.put("10005889", "03000201");
            sortMap.put("10005893", "03000503");
            sortMap.put("10005894", "03000309");
            sortMap.put("10005895", "03000201");
            sortMap.put("10005896", "03000201");
            sortMap.put("10005897", "03000201");
            sortMap.put("10005898", "03000201");
            sortMap.put("10005899", "03000201");
            sortMap.put("10005900", "03000201");
            sortMap.put("10005901", "03000201");
            sortMap.put("10005902", "03000201");
            sortMap.put("10005903", "03000201");
            sortMap.put("10005905", "03000201");
            sortMap.put("10005907", "03000201");
            sortMap.put("10005908", "03000201");
            sortMap.put("10005909", "03000201");
            sortMap.put("10005910", "03000201");
            sortMap.put("10005911", "03000201");
            sortMap.put("10005912", "03000201");
            sortMap.put("10005913", "03000201");
            sortMap.put("10005914", "03000201");
            sortMap.put("10005915", "03000201");
            sortMap.put("10005916", "03000201");
            sortMap.put("10005917", "03000201");
            sortMap.put("10005918", "03000201");
            sortMap.put("10005921", "03000201");
            sortMap.put("10005922", "03000201");
            sortMap.put("10005923", "03000201");
            sortMap.put("10005924", "03000201");
            sortMap.put("10005925", "03000201");
            sortMap.put("10005927", "03000201");
            sortMap.put("10005928", "03000201");
            sortMap.put("10005929", "03000201");
            sortMap.put("10005930", "03000201");
            sortMap.put("10005932", "03000201");
            sortMap.put("10005934", "03000201");
            sortMap.put("10005935", "03000201");
            sortMap.put("10005937", "03000201");
            sortMap.put("10005938", "03000201");
            sortMap.put("10005939", "03000201");
            sortMap.put("10005940", "03000201");
            sortMap.put("10005941", "03000201");
            sortMap.put("10005942", "03000201");
            sortMap.put("10005946", "03000201");
            sortMap.put("10005948", "03000201");
            sortMap.put("10005949", "03000201");
            sortMap.put("10005950", "03000201");
            sortMap.put("10005951", "03000201");
            sortMap.put("10005952", "03000201");
            sortMap.put("10005953", "03000201");
            sortMap.put("10005954", "03000201");
            sortMap.put("10005955", "03000201");
            sortMap.put("10005956", "03000201");
            sortMap.put("10005957", "03000201");
            sortMap.put("10005959", "03000201");
            sortMap.put("10005960", "03000201");
            sortMap.put("10005961", "03000201");
            sortMap.put("10005963", "03000201");
            sortMap.put("10005964", "03000201");
            sortMap.put("10005965", "03000201");
            sortMap.put("10005966", "03000201");
            sortMap.put("10005967", "03000201");
            sortMap.put("10005968", "03000201");
            sortMap.put("10005969", "03000201");
            sortMap.put("10005970", "03000201");
            sortMap.put("10005971", "03000201");
            sortMap.put("10005972", "03000201");
            sortMap.put("10005973", "03000201");
            sortMap.put("10005974", "03000201");
            sortMap.put("10006034", "03000202");
            sortMap.put("10006048", "03000202");
            sortMap.put("10006061", "03000202");
            sortMap.put("10006079", "03000202");
            sortMap.put("10006085", "03000202");
            sortMap.put("10006086", "03000202");
            sortMap.put("10006088", "03000202");
            sortMap.put("10006089", "03000202");
            sortMap.put("10006090", "03000202");
            sortMap.put("10006091", "03000202");
            sortMap.put("10006092", "03000202");
            sortMap.put("10006093", "03000202");
            sortMap.put("10006094", "03000202");
            sortMap.put("10006095", "03000202");
            sortMap.put("10006097", "03000202");
            sortMap.put("10006102", "03000202");
            sortMap.put("10006104", "03000202");
            sortMap.put("10006107", "03000202");
            sortMap.put("10006112", "03000202");
            sortMap.put("10006137", "03000202");
            sortMap.put("10006147", "03000202");
            sortMap.put("10006155", "03000202");
            sortMap.put("10006157", "03000202");
            sortMap.put("10006160", "03000201");
            sortMap.put("10006167", "03000201");
            sortMap.put("10006168", "03000201");
            sortMap.put("10006169", "03000201");
            sortMap.put("10006172", "03000201");
            sortMap.put("10006173", "03000201");
            sortMap.put("10006193", "03000201");
            sortMap.put("10006194", "03000201");
            sortMap.put("10006195", "03000202");
            sortMap.put("10006201", "03000301");
            sortMap.put("10006202", "03000203");
            sortMap.put("10006204", "03000203");
            sortMap.put("10006210", "03000203");
            sortMap.put("10006211", "03000203");
            sortMap.put("10006212", "03000203");
            sortMap.put("10006214", "03000011");
            sortMap.put("10006215", "03000305");
            sortMap.put("10006217", "03000001");
            sortMap.put("10006218", "03000308");
            sortMap.put("10006219", "03000001");
            sortMap.put("10006220", "03000308");
            sortMap.put("10006221", "03000202");
            sortMap.put("10006222", "03000001");
            sortMap.put("10006228", "03000001");
            sortMap.put("10006229", "03000001");
            sortMap.put("10006230", "03000203");
            sortMap.put("10006233", "03000305");
            sortMap.put("10006234", "03000305");
            sortMap.put("10006247", "03000309");
            sortMap.put("10006250", "03000001");
            sortMap.put("10006251", "03000007");
            sortMap.put("10006252", "03000007");
            sortMap.put("10006253", "03000007");
            sortMap.put("10006254", "03000007");
            sortMap.put("10006255", "03000007");
            sortMap.put("10006256", "03000007");
            sortMap.put("10006257", "03000007");
            sortMap.put("10006264", "03000202");
            sortMap.put("10006266", "03000202");
            sortMap.put("10006267", "03000202");
            sortMap.put("10006268", "03000202");
            sortMap.put("10006269", "03000202");
            sortMap.put("10006275", "03000309");
            sortMap.put("10006276", "03000309");
            sortMap.put("10006278", "03000203");
            sortMap.put("10006279", "03000203");
            sortMap.put("10006280", "03000203");
            sortMap.put("10006281", "03000203");
            sortMap.put("10006282", "03000203");
            sortMap.put("10006283", "03000203");
            sortMap.put("10006284", "03000203");
            sortMap.put("10006285", "03000203");
            sortMap.put("10006286", "03000203");
            sortMap.put("10006287", "03000203");
            sortMap.put("10006288", "03000203");
            sortMap.put("10006289", "03000203");
            sortMap.put("10006290", "03000203");
            sortMap.put("10006291", "03000203");
            sortMap.put("10006292", "03000203");
            sortMap.put("10006293", "03000203");
            sortMap.put("10006294", "03000203");
            sortMap.put("10006295", "03000203");
            sortMap.put("10006296", "03000203");
            sortMap.put("10006297", "03000203");
            sortMap.put("10006298", "03000203");
            sortMap.put("10006299", "03000203");
            sortMap.put("10006300", "03000203");
            sortMap.put("10006301", "03000203");
            sortMap.put("10006302", "03000203");
            sortMap.put("10006303", "03000203");
            sortMap.put("10006304", "03000203");
            sortMap.put("10006305", "03000203");
            sortMap.put("10006306", "03000203");
            sortMap.put("10006307", "03000203");
            sortMap.put("10006308", "03000203");
            sortMap.put("10006309", "03000203");
            sortMap.put("10006310", "03000007");
            sortMap.put("10006311", "03000007");
            sortMap.put("10006312", "03000007");
            sortMap.put("10006313", "03000001");
            sortMap.put("10006316", "03000001");
            sortMap.put("10006317", "03000011");
            sortMap.put("10006318", "03000011");
            sortMap.put("10006319", "03000011");
            sortMap.put("10006320", "03000011");
            sortMap.put("10006321", "03000011");
            sortMap.put("10006322", "03000011");
            sortMap.put("10006325", "03000010");
            sortMap.put("10006327", "03000102");
            sortMap.put("10006331", "03000307");
            sortMap.put("10006332", "03000307");
            sortMap.put("10006333", "03000307");
            sortMap.put("10006336", "03000001");
            sortMap.put("10006338", "03000201");
            sortMap.put("10006343", "03000201");
            sortMap.put("10006345", "03000201");
            sortMap.put("10006346", "03000201");
            sortMap.put("10006347", "03000201");
            sortMap.put("10006352", "03000202");
            sortMap.put("10006354", "03000201");
            sortMap.put("10006363", "03000202");
            sortMap.put("10006364", "03000202");
            sortMap.put("10006373", "03000309");
            sortMap.put("10006374", "03000309");
            sortMap.put("10006375", "03000309");
            sortMap.put("10006390", "03000003");
            sortMap.put("10006393", "03000203");
            sortMap.put("10006394", "03000203");
            sortMap.put("10006395", "03000405");
            sortMap.put("10006396", "03000405");
            sortMap.put("10006397", "03000405");
            sortMap.put("10006398", "03000309");
            sortMap.put("10006406", "03000503");
            sortMap.put("10006414", "03000201");
            sortMap.put("10006415", "03000201");
            sortMap.put("10006419", "03000202");
            sortMap.put("10006420", "03000202");
            sortMap.put("10006421", "03000202");
            sortMap.put("10006422", "03000202");
            sortMap.put("10006423", "03000202");
            sortMap.put("10006424", "03000202");
            sortMap.put("10006425", "03000202");
            sortMap.put("10006426", "03000202");
            sortMap.put("10006427", "03000202");
            sortMap.put("10006428", "03000202");
            sortMap.put("10006429", "03000201");
            sortMap.put("10006430", "03000201");
            sortMap.put("10006431", "03000201");
            sortMap.put("10006432", "03000201");
            sortMap.put("10006433", "03000201");
            sortMap.put("10006434", "03000201");
            sortMap.put("10006435", "03000201");
            sortMap.put("10006436", "03000201");
            sortMap.put("10006437", "03000201");
            sortMap.put("10006438", "03000201");
            sortMap.put("10006439", "03000201");
            sortMap.put("10006440", "03000201");
            sortMap.put("10006441", "03000201");
            sortMap.put("10006442", "03000201");
            sortMap.put("10006443", "03000201");
            sortMap.put("10006449", "03000202");
            sortMap.put("10006456", "03000202");
            sortMap.put("10006473", "03000202");
            sortMap.put("10006581", "03000202");
            sortMap.put("10006728", "03000001");
            sortMap.put("10006730", "03000309");
            sortMap.put("10006733", "03000309");
            sortMap.put("10006735", "03000308");
            sortMap.put("10006736", "03000308");
            sortMap.put("10006737", "03000308");
            sortMap.put("10006738", "03000308");
            sortMap.put("10006739", "03000308");
            sortMap.put("10006740", "03000308");
            sortMap.put("10006743", "03000309");
            sortMap.put("10006745", "03000309");
            sortMap.put("10006746", "03000001");
            sortMap.put("10006747", "03000001");
            sortMap.put("10006748", "03000001");
            sortMap.put("10006749", "03000001");
            sortMap.put("10006750", "03000001");
            sortMap.put("10006752", "03000001");
            sortMap.put("10006753", "03000001");
            sortMap.put("10006754", "03000001");
            sortMap.put("10006755", "03000309");
            sortMap.put("10006759", "03000201");
            sortMap.put("10006761", "03000202");
            sortMap.put("10006781", "03000309");
            sortMap.put("10006795", "03000404");
            sortMap.put("10006797", "03000404");
            sortMap.put("10006798", "03000308");
            sortMap.put("10006806", "03000404");
            sortMap.put("10006817", "03000309");
            sortMap.put("10006818", "03000404");
            sortMap.put("10006821", "03000404");
            sortMap.put("10006822", "03000404");
            sortMap.put("10006831", "03000201");
            sortMap.put("10006832", "03000201");
            sortMap.put("10006833", "03000202");
            sortMap.put("10006840", "03000309");
            sortMap.put("10006842", "03000309");
            sortMap.put("10006843", "03000309");
            sortMap.put("10006845", "03000309");
            sortMap.put("10006849", "03000503");
            sortMap.put("10006852", "03000308");
            sortMap.put("10006861", "03000309");
            sortMap.put("10006866", "03000201");
            sortMap.put("10006877", "03000309");
            sortMap.put("10006894", "03000308");
            sortMap.put("10006895", "03000309");
            sortMap.put("10006896", "03000309");
            sortMap.put("10006897", "03000503");
            sortMap.put("10006898", "03000503");
            sortMap.put("10006899", "03000309");
            sortMap.put("10006900", "03000309");
            sortMap.put("10006903", "03000309");
            sortMap.put("10006958", "03000010");
            sortMap.put("10006960", "03000309");
            sortMap.put("10006961", "03000309");
            sortMap.put("10006964", "03000309");
            sortMap.put("10006965", "03000309");
            sortMap.put("10006969", "03000002");
            sortMap.put("10006970", "03000002");
            sortMap.put("10006971", "03000002");
            sortMap.put("10006972", "03000007");
            sortMap.put("10006973", "03000007");
            sortMap.put("10006974", "03000007");
            sortMap.put("10006977", "03000002");
            sortMap.put("10006980", "03000002");
            sortMap.put("10006995", "03000002");
            sortMap.put("10006997", "03000002");
            sortMap.put("10007002", "03000309");
            sortMap.put("10007006", "03000309");
            sortMap.put("10007020", "03000309");
            sortMap.put("10007021", "03000308");
            sortMap.put("10007022", "03000308");
            sortMap.put("10007023", "03000308");
            sortMap.put("10007024", "03000308");
            sortMap.put("10007025", "03000308");
            sortMap.put("10007036", "03000309");
            sortMap.put("10007044", "03000201");
            sortMap.put("10007046", "03000201");
            sortMap.put("10007048", "03000201");
            sortMap.put("10007089", "03000201");
            sortMap.put("10007154", "03000201");
            sortMap.put("10007160", "03000201");
            sortMap.put("10007162", "03000201");
            sortMap.put("10007188", "03000201");
            sortMap.put("10007192", "03000202");
            sortMap.put("10007199", "03000202");
            sortMap.put("10007210", "03000202");
            sortMap.put("10007220", "03000103");
            sortMap.put("10007225", "03000008");
            sortMap.put("10007227", "03000008");
            sortMap.put("10007232", "03000008");
            sortMap.put("10007233", "03000008");
            sortMap.put("10007236", "03000102");
            sortMap.put("10007239", "03000307");
            sortMap.put("10007240", "03000307");
            sortMap.put("10007241", "03000307");
            sortMap.put("10007242", "03000309");
            sortMap.put("10007244", "03000309");
            sortMap.put("10007246", "03000309");
            sortMap.put("10007247", "03000309");
            sortMap.put("10007248", "03000309");
            sortMap.put("10007260", "03000309");
            sortMap.put("10007261", "03000309");
            sortMap.put("10007262", "03000309");
            sortMap.put("10007263", "03000309");
            sortMap.put("10007264", "03000309");
            sortMap.put("10007265", "03000309");
            sortMap.put("10007266", "03000309");
            sortMap.put("10007267", "03000309");
            sortMap.put("10007269", "03000309");
            sortMap.put("10007270", "03000309");
            sortMap.put("10007272", "03000309");
            sortMap.put("10007273", "03000309");
            sortMap.put("10007276", "03000001");
            sortMap.put("10007280", "03000202");
            sortMap.put("10007283", "03000202");
            sortMap.put("10007290", "03000202");
            sortMap.put("10007292", "03000202");
            sortMap.put("10007302", "03000202");
            sortMap.put("10007304", "03000202");
            sortMap.put("10007307", "03000201");
            sortMap.put("10007310", "03000202");
            sortMap.put("10007312", "03000202");
            sortMap.put("10007315", "03000202");
            sortMap.put("10007318", "03000202");
            sortMap.put("10007319", "03000202");
            sortMap.put("10007321", "03000202");
            sortMap.put("10007360", "03000008");
            sortMap.put("10007546", "03000309");
            sortMap.put("10007574", "03000309");
            sortMap.put("10007575", "03000202");
            sortMap.put("10007581", "03000309");
            sortMap.put("10007585", "03000309");
            sortMap.put("10007593", "03000309");
            sortMap.put("10007595", "03000309");
            sortMap.put("10007629", "03000503");
            sortMap.put("10007652", "03000202");
            sortMap.put("10007667", "03000202");
            sortMap.put("10007689", "03000202");
            sortMap.put("10007696", "03000202");
            sortMap.put("10007702", "03000202");
            sortMap.put("10007708", "03000202");
            sortMap.put("10007709", "03000202");
            sortMap.put("10007715", "03000202");
            sortMap.put("10007717", "03000202");
            sortMap.put("10007720", "03000202");
            sortMap.put("10007724", "03000309");
            sortMap.put("10007726", "03000309");
            sortMap.put("10007730", "03000202");
            sortMap.put("10007731", "03000202");
            sortMap.put("10007732", "03000202");
            sortMap.put("10007759", "03000202");
            sortMap.put("10007763", "03000202");
            sortMap.put("10007779", "03000202");
            sortMap.put("10007816", "03000202");
            sortMap.put("10007866", "03000202");
            sortMap.put("10007883", "03000202");
            sortMap.put("10007901", "03000202");
            sortMap.put("10007909", "03000202");
            sortMap.put("10007911", "03000202");
            sortMap.put("10007932", "03000305");
            sortMap.put("10007933", "03000309");
            sortMap.put("10007941", "03000309");
            sortMap.put("10007949", "03000308");
            sortMap.put("10007950", "03000308");
            sortMap.put("10007951", "03000308");
            sortMap.put("10007952", "03000308");
            sortMap.put("10007953", "03000308");
            sortMap.put("10007954", "03000308");
            sortMap.put("10007955", "03000308");
            sortMap.put("10007957", "03000308");
            sortMap.put("10008007", "03000309");
            sortMap.put("10008022", "03000502");
            sortMap.put("10008023", "03000309");
            sortMap.put("10008024", "03000301");
            sortMap.put("10008026", "03000309");
            sortMap.put("10008027", "03000201");
            sortMap.put("10008028", "03000502");
            sortMap.put("10008029", "03000103");
            sortMap.put("10008030", "03000102");
            sortMap.put("10008031", "03000102");
            sortMap.put("10008033", "03000007");
            sortMap.put("10008034", "03000101");
            sortMap.put("10008035", "03000007");
            sortMap.put("10008038", "03000001");
            sortMap.put("10008042", "03000105");
            sortMap.put("10008059", "03000203");
            sortMap.put("10008061", "03000011");
            sortMap.put("10008065", "03000309");
            sortMap.put("10008066", "03000309");
            sortMap.put("10008067", "03000309");
            sortMap.put("10008068", "03000309");
            sortMap.put("10008077", "03000001");
            sortMap.put("10008078", "03000001");
            sortMap.put("10008081", "03000008");
            sortMap.put("10008105", "03000309");
            sortMap.put("10008106", "03000309");
            sortMap.put("10008107", "03000206");
            sortMap.put("10008108", "03000206");
            sortMap.put("10008112", "03000309");
            sortMap.put("10008114", "03000309");
            sortMap.put("44111501", "03000503");
            sortMap.put("44111502", "03000503");
            sortMap.put("44111503", "03000503");
            sortMap.put("44111506", "03000503");
            sortMap.put("44111507", "03000501");
            sortMap.put("44111509", "03000501");
            sortMap.put("44111510", "03000501");
            sortMap.put("44111512", "03000501");
            sortMap.put("44111513", "03000309");
            sortMap.put("44111514", "03000309");
            sortMap.put("44111515", "03000501");
            sortMap.put("44111516", "03000501");
            sortMap.put("44111517", "03000501");
            sortMap.put("44111518", "03000503");
            sortMap.put("44111519", "03000503");
            sortMap.put("44111520", "03000309");
            sortMap.put("44111521", "03000309");
            sortMap.put("44111601", "03000309");
            sortMap.put("44111603", "03000309");
            sortMap.put("44111604", "03000309");
            sortMap.put("44111605", "03000309");
            sortMap.put("44111606", "03000309");
            sortMap.put("44111607", "03000309");
            sortMap.put("44111608", "03000309");
            sortMap.put("44111609", "03000309");
            sortMap.put("44111610", "03000309");
            sortMap.put("44111611", "03000309");
            sortMap.put("44111612", "03000309");
            sortMap.put("44111613", "03000309");
            sortMap.put("44111614", "03000309");
            sortMap.put("44111615", "03000309");
            sortMap.put("44111616", "03000309");
            sortMap.put("44111801", "03000501");
            sortMap.put("44111802", "03000501");
            sortMap.put("44111803", "03000501");
            sortMap.put("44111804", "03000501");
            sortMap.put("44111805", "03000501");
            sortMap.put("44111806", "03000501");
            sortMap.put("44111807", "03000501");
            sortMap.put("44111808", "03000501");
            sortMap.put("44111809", "03000501");
            sortMap.put("44111810", "03000501");
            sortMap.put("44111812", "03000501");
            sortMap.put("44111813", "03000501");
            sortMap.put("44111814", "03000501");
            sortMap.put("44111815", "03000501");
            sortMap.put("44111901", "03000309");
            sortMap.put("44111902", "03000309");
            sortMap.put("44111903", "03000309");
            sortMap.put("44111904", "03000309");
            sortMap.put("44111905", "03000309");
            sortMap.put("44111906", "03000309");
            sortMap.put("44111907", "03000309");
            sortMap.put("44111908", "03000309");
            sortMap.put("44111909", "03000309");
            sortMap.put("44111910", "03000309");
            sortMap.put("44111911", "03000309");
            sortMap.put("44112001", "03000309");
            sortMap.put("44112002", "03000309");
            sortMap.put("44112004", "03000309");
            sortMap.put("44112005", "03000309");
            sortMap.put("44112006", "03000309");
            sortMap.put("44112007", "03000309");
            sortMap.put("44112008", "03000309");
            sortMap.put("44121501", "03000309");
            sortMap.put("44121503", "03000309");
            sortMap.put("44121504", "03000309");
            sortMap.put("44121505", "03000309");
            sortMap.put("44121506", "03000309");
            sortMap.put("44121507", "03000309");
            sortMap.put("44121508", "03000309");
            sortMap.put("44121509", "03000309");
            sortMap.put("44121510", "03000309");
            sortMap.put("44121511", "03000309");
            sortMap.put("44121512", "03000309");
            sortMap.put("44121604", "03000501");
            sortMap.put("44121605", "03000501");
            sortMap.put("44121611", "03000501");
            sortMap.put("44121612", "03000501");
            sortMap.put("44121613", "03000501");
            sortMap.put("44121614", "03000501");
            sortMap.put("44121615", "03000501");
            sortMap.put("44121617", "03000501");
            sortMap.put("44121618", "03000501");
            sortMap.put("44121619", "03000501");
            sortMap.put("44121620", "03000501");
            sortMap.put("44121621", "03000501");
            sortMap.put("44121622", "03000501");
            sortMap.put("44121623", "03000501");
            sortMap.put("44121624", "03000501");
            sortMap.put("44121625", "03000501");
            sortMap.put("44121626", "03000501");
            sortMap.put("44121627", "03000501");
            sortMap.put("44121628", "03000501");
            sortMap.put("44121630", "03000501");
            sortMap.put("44121631", "03000501");
            sortMap.put("44121632", "03000501");
            sortMap.put("44121633", "03000501");
            sortMap.put("44121634", "03000501");
            sortMap.put("44121635", "03000501");
            sortMap.put("44121701", "03000501");
            sortMap.put("44121702", "03000501");
            sortMap.put("44121703", "03000501");
            sortMap.put("44121704", "03000501");
            sortMap.put("44121705", "03000501");
            sortMap.put("44121706", "03000501");
            sortMap.put("44121707", "03000501");
            sortMap.put("44121708", "03000501");
            sortMap.put("44121709", "03000501");
            sortMap.put("44121710", "03000501");
            sortMap.put("44121711", "03000501");
            sortMap.put("44121712", "03000501");
            sortMap.put("44121713", "03000501");
            sortMap.put("44121714", "03000501");
            sortMap.put("44121715", "03000501");
            sortMap.put("44121716", "03000501");
            sortMap.put("44121717", "03000501");
            sortMap.put("44121718", "03000501");
            sortMap.put("44121801", "03000501");
            sortMap.put("44121802", "03000501");
            sortMap.put("44121804", "03000501");
            sortMap.put("44121805", "03000501");
            sortMap.put("44121806", "03000501");
            sortMap.put("44121807", "03000501");
            sortMap.put("44121808", "03000501");
            sortMap.put("44121902", "03000501");
            sortMap.put("44121904", "03000501");
            sortMap.put("44121905", "03000501");
            sortMap.put("44122001", "03000502");
            sortMap.put("44122002", "03000502");
            sortMap.put("44122003", "03000502");
            sortMap.put("44122005", "03000502");
            sortMap.put("44122008", "03000502");
            sortMap.put("44122009", "03000502");
            sortMap.put("44122010", "03000502");
            sortMap.put("44122011", "03000502");
            sortMap.put("44122012", "03000502");
            sortMap.put("44122013", "03000502");
            sortMap.put("44122014", "03000502");
            sortMap.put("44122015", "03000502");
            sortMap.put("44122016", "03000502");
            sortMap.put("44122017", "03000502");
            sortMap.put("44122018", "03000502");
            sortMap.put("44122019", "03000502");
            sortMap.put("44122020", "03000502");
            sortMap.put("44122021", "03000502");
            sortMap.put("44122022", "03000502");
            sortMap.put("44122023", "03000502");
            sortMap.put("44122024", "03000502");
            sortMap.put("44122025", "03000502");
            sortMap.put("44122026", "03000502");
            sortMap.put("44122027", "03000502");
            sortMap.put("44122028", "03000502");
            sortMap.put("44122101", "03000309");
            sortMap.put("44122103", "03000309");
            sortMap.put("44122104", "03000309");
            sortMap.put("44122105", "03000309");
            sortMap.put("44122106", "03000309");
            sortMap.put("44122107", "03000309");
            sortMap.put("44122109", "03000309");
            sortMap.put("44122110", "03000309");
            sortMap.put("44122111", "03000309");
            sortMap.put("44122112", "03000309");
            sortMap.put("44122113", "03000309");
            sortMap.put("44122114", "03000309");
            sortMap.put("44122115", "03000309");
            sortMap.put("44122116", "03000309");
            sortMap.put("44122117", "03000309");
            sortMap.put("44122118", "03000309");
            sortMap.put("44122119", "03000309");
            sortMap.put("44122120", "03000309");
            sortMap.put("44122121", "03000309");
            sortMap.put("46181601", "03000309");
            sortMap.put("46181602", "03000309");
            sortMap.put("46181603", "03000309");
            sortMap.put("46181604", "03000309");
            sortMap.put("46181605", "03000309");
            sortMap.put("46181606", "03000309");
            sortMap.put("46181701", "03000309");
            sortMap.put("46181702", "03000309");
            sortMap.put("46181703", "03000309");
            sortMap.put("46181704", "03000309");
            sortMap.put("46181705", "03000309");
            sortMap.put("46181706", "03000309");
            sortMap.put("46181707", "03000309");
            sortMap.put("46181801", "03000309");
            sortMap.put("46181802", "03000309");
            sortMap.put("46181803", "03000309");
            sortMap.put("46181804", "03000309");
            sortMap.put("46181805", "03000309");
            sortMap.put("46181806", "03000309");
            sortMap.put("46181808", "03000309");
            sortMap.put("46181809", "03000309");
            sortMap.put("46181810", "03000309");
            sortMap.put("46181811", "03000309");
            sortMap.put("46181901", "03000309");
            sortMap.put("46181902", "03000309");
            sortMap.put("46181903", "03000309");
            sortMap.put("46182001", "03000309");
            sortMap.put("46182002", "03000309");
            sortMap.put("46182003", "03000309");
            sortMap.put("46182004", "03000309");
            sortMap.put("46182005", "03000309");
            sortMap.put("46182006", "03000309");
            sortMap.put("46182101", "03000309");
            sortMap.put("46182102", "03000309");
            sortMap.put("46182103", "03000309");
            sortMap.put("46182104", "03000309");
            sortMap.put("46182105", "03000309");
            sortMap.put("46182106", "03000309");
            sortMap.put("46182107", "03000309");
            sortMap.put("46182108", "03000309");
            sortMap.put("46182201", "03000309");
            sortMap.put("46182202", "03000309");
            sortMap.put("46182203", "03000309");
            sortMap.put("46182204", "03000309");
            sortMap.put("46182205", "03000309");
            sortMap.put("46182206", "03000309");
            sortMap.put("46182207", "03000309");
            sortMap.put("46182208", "03000309");
            sortMap.put("46182209", "03000309");
            sortMap.put("46182301", "03000309");
            sortMap.put("46182302", "03000309");
            sortMap.put("46182303", "03000309");
            sortMap.put("46182304", "03000309");
            sortMap.put("46182305", "03000309");
            sortMap.put("46182306", "03000309");
            sortMap.put("50111510", "03000203");
            sortMap.put("50111511", "03000203");
            sortMap.put("50111512", "03000203");
            sortMap.put("50112001", "03000203");
            sortMap.put("50112002", "03000203");
            sortMap.put("50112003", "03000203");
            sortMap.put("50131606", "03000203");
            sortMap.put("50131607", "03000203");
            sortMap.put("50131608", "03000203");
            sortMap.put("50131609", "03000203");
            sortMap.put("50131610", "03000203");
            sortMap.put("50131701", "03000002");
            sortMap.put("50131702", "03000002");
            sortMap.put("50131801", "03000002");
            sortMap.put("50131802", "03000002");
            sortMap.put("50131803", "03000002");
            sortMap.put("50181708", "03000004");
            sortMap.put("50181709", "03000004");
            sortMap.put("50181901", "03000004");
            sortMap.put("50181902", "03000004");
            sortMap.put("50181903", "03000004");
            sortMap.put("50181904", "03000004");
            sortMap.put("50181905", "03000004");
            sortMap.put("50181906", "03000004");
            sortMap.put("50182001", "03000004");
            sortMap.put("50182002", "03000004");
            sortMap.put("50201706", "03000007");
            sortMap.put("50201707", "03000007");
            sortMap.put("50201708", "03000007");
            sortMap.put("50201709", "03000007");
            sortMap.put("50201710", "03000008");
            sortMap.put("50201711", "03000008");
            sortMap.put("50201712", "03000008");
            sortMap.put("50201713", "03000008");
            sortMap.put("50201714", "03000007");
            sortMap.put("50202201", "03000103");
            sortMap.put("50202202", "03000007");
            sortMap.put("50202203", "03000102");
            sortMap.put("50202204", "03000102");
            sortMap.put("50202205", "03000102");
            sortMap.put("50202206", "03000101");
            sortMap.put("50202207", "03000007");
            sortMap.put("50202301", "03000007");
            sortMap.put("50202302", "03000007");
            sortMap.put("50202303", "03000007");
            sortMap.put("50202304", "03000007");
            sortMap.put("50202305", "03000007");
            sortMap.put("50202306", "03000007");
            sortMap.put("50202307", "03000007");
            sortMap.put("50202308", "03000007");
            sortMap.put("50202309", "03000007");
            sortMap.put("50202310", "03000007");
            sortMap.put("50221001", "03000009");
            sortMap.put("50221002", "03000009");
            sortMap.put("50221101", "03000009");
            sortMap.put("50221102", "03000009");
            sortMap.put("50221201", "03000009");
            sortMap.put("50221202", "03000009");
            sortMap.put("52121501", "03000309");
            sortMap.put("52121502", "03000309");
            sortMap.put("52121503", "03000309");
            sortMap.put("52121504", "03000309");
            sortMap.put("52121505", "03000309");
            sortMap.put("52121506", "03000309");
            sortMap.put("52121507", "03000309");
            sortMap.put("52121508", "03000309");
            sortMap.put("52121509", "03000309");
            sortMap.put("52121510", "03000309");
            sortMap.put("52121511", "03000309");
            sortMap.put("52121512", "03000309");
            sortMap.put("52121513", "03000309");
            sortMap.put("52121601", "03000306");
            sortMap.put("52121602", "03000306");
            sortMap.put("52121603", "03000307");
            sortMap.put("52121604", "03000307");
            sortMap.put("52121605", "03000307");
            sortMap.put("52121606", "03000307");
            sortMap.put("52121607", "03000307");
            sortMap.put("52121608", "03000307");
            sortMap.put("52121701", "03000309");
            sortMap.put("52121702", "03000309");
            sortMap.put("52121703", "03000309");
            sortMap.put("52121704", "03000309");
            sortMap.put("52131501", "03000309");
            sortMap.put("52131503", "03000309");
            sortMap.put("52131601", "03000309");
            sortMap.put("52131602", "03000309");
            sortMap.put("52131603", "03000309");
            sortMap.put("52131604", "03000309");
            sortMap.put("52131701", "03000309");
            sortMap.put("52131702", "03000309");
            sortMap.put("52131703", "03000309");
            sortMap.put("52131704", "03000309");
            sortMap.put("52141501", "03000308");
            sortMap.put("52141502", "03000308");
            sortMap.put("52141503", "03000308");
            sortMap.put("52141504", "03000308");
            sortMap.put("52141505", "03000308");
            sortMap.put("52141506", "03000308");
            sortMap.put("52141507", "03000308");
            sortMap.put("52141508", "03000308");
            sortMap.put("52141509", "03000308");
            sortMap.put("52141510", "03000308");
            sortMap.put("52141511", "03000308");
            sortMap.put("52141512", "03000308");
            sortMap.put("52141513", "03000308");
            sortMap.put("52141514", "03000308");
            sortMap.put("52141515", "03000308");
            sortMap.put("52141516", "03000308");
            sortMap.put("52141517", "03000308");
            sortMap.put("52141518", "03000308");
            sortMap.put("52141519", "03000308");
            sortMap.put("52141520", "03000308");
            sortMap.put("52141521", "03000308");
            sortMap.put("52141522", "03000308");
            sortMap.put("52141523", "03000308");
            sortMap.put("52141524", "03000308");
            sortMap.put("52141525", "03000308");
            sortMap.put("52141526", "03000308");
            sortMap.put("52141527", "03000308");
            sortMap.put("52141528", "03000308");
            sortMap.put("52141529", "03000308");
            sortMap.put("52141530", "03000308");
            sortMap.put("52141531", "03000308");
            sortMap.put("52141532", "03000308");
            sortMap.put("52141533", "03000308");
            sortMap.put("52141534", "03000308");
            sortMap.put("52141535", "03000308");
            sortMap.put("52141536", "03000308");
            sortMap.put("52141537", "03000307");
            sortMap.put("52141538", "03000307");
            sortMap.put("52141539", "03000308");
            sortMap.put("52141601", "03000308");
            sortMap.put("52141602", "03000308");
            sortMap.put("52141603", "03000308");
            sortMap.put("52141604", "03000308");
            sortMap.put("52141605", "03000304");
            sortMap.put("52141606", "03000304");
            sortMap.put("52141607", "03000304");
            sortMap.put("52141608", "03000304");
            sortMap.put("52141701", "03000308");
            sortMap.put("52141703", "03000308");
            sortMap.put("52141704", "03000308");
            sortMap.put("52141705", "03000308");
            sortMap.put("52141706", "03000308");
            sortMap.put("52141801", "03000308");
            sortMap.put("52141802", "03000308");
            sortMap.put("52141803", "03000308");
            sortMap.put("52151501", "03000307");
            sortMap.put("52151502", "03000307");
            sortMap.put("52151503", "03000307");
            sortMap.put("52151504", "03000307");
            sortMap.put("52151505", "03000307");
            sortMap.put("52151506", "03000307");
            sortMap.put("52151507", "03000307");
            sortMap.put("52151601", "03000307");
            sortMap.put("52151602", "03000307");
            sortMap.put("52151603", "03000307");
            sortMap.put("52151604", "03000307");
            sortMap.put("52151605", "03000307");
            sortMap.put("52151606", "03000307");
            sortMap.put("52151607", "03000307");
            sortMap.put("52151608", "03000307");
            sortMap.put("52151609", "03000307");
            sortMap.put("52151610", "03000307");
            sortMap.put("52151611", "03000307");
            sortMap.put("52151612", "03000307");
            sortMap.put("52151613", "03000307");
            sortMap.put("52151614", "03000307");
            sortMap.put("52151615", "03000307");
            sortMap.put("52151616", "03000307");
            sortMap.put("52151617", "03000307");
            sortMap.put("52151618", "03000307");
            sortMap.put("52151619", "03000307");
            sortMap.put("52151620", "03000307");
            sortMap.put("52151621", "03000307");
            sortMap.put("52151622", "03000307");
            sortMap.put("52151623", "03000307");
            sortMap.put("52151624", "03000307");
            sortMap.put("52151625", "03000307");
            sortMap.put("52151626", "03000307");
            sortMap.put("52151627", "03000307");
            sortMap.put("52151628", "03000307");
            sortMap.put("52151629", "03000307");
            sortMap.put("52151630", "03000307");
            sortMap.put("52151631", "03000307");
            sortMap.put("52151632", "03000307");
            sortMap.put("52151633", "03000307");
            sortMap.put("52151634", "03000307");
            sortMap.put("52151635", "03000307");
            sortMap.put("52151636", "03000307");
            sortMap.put("52151637", "03000307");
            sortMap.put("52151638", "03000307");
            sortMap.put("52151639", "03000307");
            sortMap.put("52151640", "03000307");
            sortMap.put("52151641", "03000307");
            sortMap.put("52151642", "03000307");
            sortMap.put("52151643", "03000307");
            sortMap.put("52151644", "03000307");
            sortMap.put("52151645", "03000307");
            sortMap.put("52151646", "03000307");
            sortMap.put("52151647", "03000307");
            sortMap.put("52151648", "03000307");
            sortMap.put("52151649", "03000307");
            sortMap.put("52151650", "03000307");
            sortMap.put("52151701", "03000307");
            sortMap.put("52151702", "03000307");
            sortMap.put("52151703", "03000307");
            sortMap.put("52151704", "03000307");
            sortMap.put("52151705", "03000307");
            sortMap.put("52151706", "03000307");
            sortMap.put("52151707", "03000307");
            sortMap.put("52151801", "03000307");
            sortMap.put("52151802", "03000307");
            sortMap.put("52151803", "03000307");
            sortMap.put("52151804", "03000307");
            sortMap.put("52151805", "03000307");
            sortMap.put("52151806", "03000307");
            sortMap.put("52151807", "03000307");
            sortMap.put("52151808", "03000307");
            sortMap.put("52151809", "03000307");
            sortMap.put("52151810", "03000307");
            sortMap.put("52151811", "03000307");
            sortMap.put("52151812", "03000307");
            sortMap.put("52151813", "03000307");
            sortMap.put("52151901", "03000307");
            sortMap.put("52151902", "03000307");
            sortMap.put("52151903", "03000307");
            sortMap.put("52151904", "03000307");
            sortMap.put("52151905", "03000307");
            sortMap.put("52151906", "03000307");
            sortMap.put("52151907", "03000307");
            sortMap.put("52151908", "03000307");
            sortMap.put("52151909", "03000307");
            sortMap.put("52152001", "03000307");
            sortMap.put("52152002", "03000307");
            sortMap.put("52152003", "03000307");
            sortMap.put("52152004", "03000307");
            sortMap.put("52152005", "03000307");
            sortMap.put("52152006", "03000307");
            sortMap.put("52152007", "03000307");
            sortMap.put("52152008", "03000307");
            sortMap.put("52152009", "03000307");
            sortMap.put("52152010", "03000307");
            sortMap.put("52152011", "03000307");
            sortMap.put("52152012", "03000307");
            sortMap.put("52152013", "03000307");
            sortMap.put("52152014", "03000307");
            sortMap.put("52152015", "03000307");
            sortMap.put("52152016", "03000307");
            sortMap.put("52152101", "03000307");
            sortMap.put("52152102", "03000307");
            sortMap.put("52152103", "03000307");
            sortMap.put("52152104", "03000307");
            sortMap.put("52152105", "03000307");
            sortMap.put("52152201", "03000309");
            sortMap.put("52152202", "03000309");
            sortMap.put("52152203", "03000309");
            sortMap.put("53131501", "03000309");
            sortMap.put("53131502", "03000309");
            sortMap.put("53131503", "03000309");
            sortMap.put("53131504", "03000309");
            sortMap.put("53131505", "03000309");
            sortMap.put("53131506", "03000309");
            sortMap.put("53131507", "03000309");
            sortMap.put("53131508", "03000309");
            sortMap.put("53131509", "03000309");
            sortMap.put("53131601", "03000309");
            sortMap.put("53131602", "03000309");
            sortMap.put("53131603", "03000309");
            sortMap.put("53131604", "03000309");
            sortMap.put("53131605", "03000309");
            sortMap.put("53131606", "03000309");
            sortMap.put("53131607", "03000301");
            sortMap.put("53131608", "03000301");
            sortMap.put("53131609", "03000301");
            sortMap.put("53131610", "03000301");
            sortMap.put("53131611", "03000301");
            sortMap.put("53131612", "03000301");
            sortMap.put("53131613", "03000301");
            sortMap.put("53131614", "03000301");
            sortMap.put("53131615", "03000301");
            sortMap.put("53131616", "03000301");
            sortMap.put("53131617", "03000309");
            sortMap.put("53131618", "03000309");
            sortMap.put("53131619", "03000301");
            sortMap.put("53131620", "03000301");
            sortMap.put("53131621", "03000309");
            sortMap.put("53131622", "03000309");
            sortMap.put("53131623", "03000309");
            sortMap.put("53131624", "03000309");
            sortMap.put("53131625", "03000309");
            sortMap.put("53131626", "03000309");
            sortMap.put("53131627", "03000309");
            sortMap.put("53131628", "03000301");
            sortMap.put("53131629", "03000301");
            sortMap.put("53131630", "03000301");
            sortMap.put("53131631", "03000301");
            sortMap.put("53131632", "03000301");
            sortMap.put("53131633", "03000301");
            sortMap.put("53131634", "03000301");
            sortMap.put("53131635", "03000301");
            sortMap.put("53131636", "03000301");
            sortMap.put("53131637", "03000303");

        }
        if (newSortId != null && sortMap.containsKey(newSortId)) {
            return sortMap.get(newSortId);
        } else if (oldSortId != null && sortMap.containsKey(oldSortId)) {
            return sortMap.get(oldSortId);
        } else {
            return "01999999";//未分类
        }
    }

    private static String getTrace(Throwable t) {
        StringWriter stringWriter = new StringWriter();
        PrintWriter writer = new PrintWriter(stringWriter);
        t.printStackTrace(writer);
        StringBuffer buffer = stringWriter.getBuffer();
        return buffer.toString();
    }
}
